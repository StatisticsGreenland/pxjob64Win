userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=character(),
numberOfContents=character())
for (i in 1:length(filenames)) {
statlog_all <- read_log(filenames[i])
colnames(statlog_all)<- c("time","X2","X3","X4","X5","X6","X7","context","userID","language",
"database","actionType","actionName", "tableID", "numberOfCells",
"numberOfContents")
statlog <- rbind(statlog,statlog_all)
}
View(statlog)
slog <- statlog %>%
filter(database == "Greenland") %>%
select(year,month,subcode,table,language,actionType,actionName,context) %>%
mutate(antal = 1) %>%
group_by(year,month,subcode,table,language,actionType,actionName,context) %>%
summarise(value = sum(antal)) %>%
ungroup() %>%
arrange(year,month,subcode,table,language,actionType,actionName,context)
statlog$year <- str_sub(statlog$time,1,4)
statlog$month <- as.numeric(str_sub(statlog$time,6,7))
statlog$context <- gsub(".*=","",statlog$context)
statlog$userID <- gsub(".*=","",statlog$userID)
statlog$language <- gsub(".*=","",statlog$language)
statlog$database <- gsub(".*=","",statlog$database)
statlog$actionType <- gsub(".*=","",statlog$actionType)
statlog$actionName <- gsub(".*=","",statlog$actionName)
statlog$tableID <- gsub(".*=","",statlog$tableID)
statlog$numberOfCells <- gsub(".*=","",statlog$numberOfCells)
statlog$context <- gsub(",","",statlog$context)
statlog$userID <- gsub(",","",statlog$userID)
statlog$language <- gsub(",","",statlog$language)
statlog$database <- gsub(",","",statlog$database)
statlog$actionType <- gsub(",","",statlog$actionType)
statlog$actionName <- gsub(",","",statlog$actionName)
statlog$tableID <- gsub(",","",statlog$tableID)
statlog$numberOfCells <- gsub(",","",statlog$numberOfCells)
statlog$table_tmp <- gsub(".*[\\]","All/",statlog$tableID)
statlog$table <- gsub(".*/","",statlog$table_tmp)
statlog$table <- gsub(".px","",statlog$table)
statlog$table <- gsub(".PX","",statlog$table)
statlog$subcode <- str_sub(statlog$table,1,2)
slog <- statlog %>%
filter(database == "Greenland") %>%
select(year,month,subcode,table,language,actionType,actionName,context) %>%
mutate(antal = 1) %>%
group_by(year,month,subcode,table,language,actionType,actionName,context) %>%
summarise(value = sum(antal)) %>%
ungroup() %>%
arrange(year,month,subcode,table,language,actionType,actionName,context)
View(slog)
# setup Do_Px ------------------------------------------------------------
library(pxjob64Win)
pxjob <- c(system.file(package = "pxjob64Win","PxJob64.exe"))
setwd("C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/pxlog")
tmp_file = "output_tmp.csv"
ctl_file = "control.csv"
matrix = "SBXSTAT"
title = c("Statbank usage, Statistics Greenland;en")
languagecode = "languagecode;en"
variables = "VARIABLES;year,month,subcode,table,language,actionType,actionName,context"
contents = "CONTENTS;count"
# Do_Px
#1 Write data to csv file
write.table_with_header(so,tmp_file,title,sep=';')
write_lines("",tmp_file, append = TRUE)
write_lines("",tmp_file, append = TRUE)
write_lines(languagecode,tmp_file, append = TRUE)
write_lines(variables,tmp_file, append = TRUE)
write_lines(contents,tmp_file, append = TRUE)
# convert to px
#pxjob(tmp_file,paste(matrix,".px",sep=""))
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
if (file.exists(tmp_file)) {file.remove(tmp_file)}
# Do_Px
#1 Write data to csv file
write.table_with_header(slog,tmp_file,title,sep=';')
write_lines("",tmp_file, append = TRUE)
write_lines("",tmp_file, append = TRUE)
write_lines(languagecode,tmp_file, append = TRUE)
write_lines(variables,tmp_file, append = TRUE)
write_lines(contents,tmp_file, append = TRUE)
# convert to px
#pxjob(tmp_file,paste(matrix,".px",sep=""))
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
if (file.exists(tmp_file)) {file.remove(tmp_file)}
# Pivot
# Do control file
writeLines("STUB;HEADING",ctl_file)
write_lines("year,month,subcode,table;language,actionType,actionName,context",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Pivot
# Matrix, Subject-code
# Do control file
writeLines("MATRIX;SUBJECT-CODE",ctl_file)
write_lines(matrix,ctl_file, append = TRUE)
write_lines(";SB",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Matrix
# Subject-area, units
# Do control file
writeLines("SUBJECT-AREA;UNITS;languagecode",ctl_file)
write_lines("StatBank;;en",ctl_file, append = TRUE)
write_lines(";count;en",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Subject-area, units
# Description
# Do control file
writeLines("DESCRIPTION;languagecode",ctl_file)
write_lines("Statbank count <em>[SBXSTAT]</em>;en",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# END Description
# Timeval
# Do control file
write_lines("TIMEVAL;A",ctl_file, append = TRUE)
write_lines("variablename;year",ctl_file, append = TRUE)
#
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
# Preface ------------------------------------------------------------
rm(list = ls())
library(tidyverse)
filenames = dir(path="C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/pxlog/stats_all/",full.names = TRUE)
statlog <- tibble(time=character(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=character(),
numberOfContents=character())
for (i in 1:length(filenames)) {
statlog_all <- read_log(filenames[i])
colnames(statlog_all)<- c("time","X2","X3","X4","X5","X6","X7","context","userID","language",
"database","actionType","actionName", "tableID", "numberOfCells",
"numberOfContents")
statlog <- rbind(statlog,statlog_all)
}
statlog$year <- str_sub(statlog$time,1,4)
statlog$month <- as.numeric(str_sub(statlog$time,6,7))
statlog$context <- gsub(".*=","",statlog$context)
statlog$userID <- gsub(".*=","",statlog$userID)
statlog$language <- gsub(".*=","",statlog$language)
statlog$database <- gsub(".*=","",statlog$database)
statlog$actionType <- gsub(".*=","",statlog$actionType)
statlog$actionName <- gsub(".*=","",statlog$actionName)
statlog$tableID <- gsub(".*=","",statlog$tableID)
statlog$numberOfCells <- gsub(".*=","",statlog$numberOfCells)
statlog$context <- gsub(",","",statlog$context)
statlog$userID <- gsub(",","",statlog$userID)
statlog$language <- gsub(",","",statlog$language)
statlog$database <- gsub(",","",statlog$database)
statlog$actionType <- gsub(",","",statlog$actionType)
statlog$actionName <- gsub(",","",statlog$actionName)
statlog$tableID <- gsub(",","",statlog$tableID)
statlog$numberOfCells <- gsub(",","",statlog$numberOfCells)
statlog$table_tmp <- gsub(".*[\\]","All/",statlog$tableID)
statlog$table <- gsub(".*/","",statlog$table_tmp)
statlog$table <- gsub(".px","",statlog$table)
statlog$table <- gsub(".PX","",statlog$table)
statlog$subcode <- str_sub(statlog$table,1,2)
slog <- statlog %>%
filter(database == "Greenland") %>%
select(year,month,subcode,language,actionType,actionName,context) %>%
mutate(antal = 1) %>%
group_by(year,month,subcode,language,actionType,actionName,context) %>%
summarise(value = sum(antal)) %>%
ungroup() %>%
arrange(year,month,subcode,language,actionType,actionName,context)
# setup Do_Px ------------------------------------------------------------
library(pxjob64Win)
pxjob <- c(system.file(package = "pxjob64Win","PxJob64.exe"))
setwd("C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/pxlog")
tmp_file = "output_tmp.csv"
ctl_file = "control.csv"
matrix = "SBXSTAT"
title = c("Statbank usage, Statistics Greenland;en")
languagecode = "languagecode;en"
variables = "VARIABLES;year,month,subcode,language,actionType,actionName,context"
contents = "CONTENTS;count"
# Do_Px
#1 Write data to csv file
write.table_with_header(slog,tmp_file,title,sep=';')
write_lines("",tmp_file, append = TRUE)
write_lines("",tmp_file, append = TRUE)
write_lines(languagecode,tmp_file, append = TRUE)
write_lines(variables,tmp_file, append = TRUE)
write_lines(contents,tmp_file, append = TRUE)
# convert to px
#pxjob(tmp_file,paste(matrix,".px",sep=""))
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
if (file.exists(tmp_file)) {file.remove(tmp_file)}
# Pivot
# Do control file
writeLines("STUB;HEADING",ctl_file)
write_lines("year,month,subcode;language,actionType,actionName,context",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Matrix, Subject-code
# Do control file
writeLines("MATRIX;SUBJECT-CODE",ctl_file)
write_lines(matrix,ctl_file, append = TRUE)
write_lines(";SB",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Subject-area, units
# Do control file
writeLines("SUBJECT-AREA;UNITS;languagecode",ctl_file)
write_lines("StatBank;;en",ctl_file, append = TRUE)
write_lines(";count;en",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Description
# Do control file
writeLines("DESCRIPTION;languagecode",ctl_file)
write_lines("Statbank count <em>[SBXSTAT]</em>;en",ctl_file, append = TRUE)
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Timeval
# Do control file
write_lines("TIMEVAL;A",ctl_file, append = TRUE)
write_lines("variablename;year",ctl_file, append = TRUE)
#
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Elimination
# Do control file
writeLines("ELIMINATION;languagecode;variablename",ctl_file)
write_lines("YES;en;month",ctl_file, append = TRUE)
write_lines("YES;en;subcode",ctl_file, append = TRUE)
write_lines("YES;en;language",ctl_file, append = TRUE)
write_lines("YES;en;actionType",ctl_file, append = TRUE)
write_lines("YES;en;actionName",ctl_file, append = TRUE)
write_lines("YES;en;context",ctl_file, append = TRUE)
#
system(paste(pxjob, " px" , " in=", matrix, ".px", " meta=", ctl_file, " -a", sep=""))
#Delete file if it exists
if (file.exists(ctl_file)) {file.remove(ctl_file)}
# Preface ------------------------------------------------------------
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
statlog <- tibble(time=character(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=character(),
numberOfContents=character())
library(tidyverse)
statlog <- tibble(time=character(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=character(),
numberOfContents=character())
statlog <- tibble(time=character(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=numeric(),
numberOfContents=character())
statlog <- tibble(time=date(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=numeric(),
numberOfContents=numeric())
statlog <- tibble(time=character(),
context=character(),
userID=character(),
language=character(),
database=character(),
actionType=character(),
actionName=character(),
tableID=character(),
numberOfCells=numeric(),
numberOfContents=numeric())
filenames = dir(path="C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/pxlog/stats/",full.names = TRUE)
for (i in 1:length(filenames)) {
statlog_all <- read_log(filenames[i])
colnames(statlog_all)<- c("time","X2","X3","X4","X5","X6","X7","context","userID","language",
"database","actionType","actionName", "tableID", "numberOfCells",
"numberOfContents")
statlog <- rbind(statlog,statlog_all)
}
statlog$year <- str_sub(statlog$time,1,4)
statlog$month <- as.numeric(str_sub(statlog$time,6,7))
statlog$month <- as.numeric(str_sub(statlog$time,6,7))
statlog$context <- gsub(".*=","",statlog$context)
statlog$context <- gsub(".*=","",statlog$context)
statlog$userID <- gsub(".*=","",statlog$userID)
statlog$language <- gsub(".*=","",statlog$language)
statlog$database <- gsub(".*=","",statlog$database)
statlog$actionType <- gsub(".*=","",statlog$actionType)
statlog$actionName <- gsub(".*=","",statlog$actionName)
statlog$tableID <- gsub(".*=","",statlog$tableID)
statlog$numberOfCells <- gsub(".*=","",statlog$numberOfCells)
statlog$context <- gsub(",","",statlog$context)
statlog$userID <- gsub(",","",statlog$userID)
statlog$language <- gsub(",","",statlog$language)
statlog$database <- gsub(",","",statlog$database)
statlog$actionType <- gsub(",","",statlog$actionType)
statlog$actionName <- gsub(",","",statlog$actionName)
statlog$tableID <- gsub(",","",statlog$tableID)
statlog$numberOfCells <- gsub(",","",statlog$numberOfCells)
statlog$table_tmp <- gsub(".*[\\]","All/",statlog$tableID)
statlog$table <- gsub(".*/","",statlog$table_tmp)
statlog$table <- gsub(".px","",statlog$table)
statlog$table <- gsub(".PX","",statlog$table)
statlog$subcode <- str_sub(statlog$table,1,2)
# Preface ------------------------------------------------------------
rm(list = ls())
library(tidyverse)
filenames = dir(path="C:/Users/Lars_/OneDrive/Dokumenter/Arbejde/R/pxlog/stats_all/",full.names = TRUE)
for (i in 1:length(filenames)) {
statlog_all <- read_log(filenames[i])
colnames(statlog_all)<- c("time","X2","X3","X4","X5","X6","X7","context","userID","language",
"database","actionType","actionName", "tableID", "numberOfCells",
"numberOfContents")
statlog <- rbind(statlog,statlog_all)
}
install.packages("~/R/tr-2010-007-files/hfdCohortFertilityTable_2.0-1077.tar.gz", repos = NULL, type = "source")
install.packages("~/R/tr-2011-001-files/PACKAGES.gz", repos = NULL)
install.packages("~/R/tr-2011-001-files/PACKAGES.gz", repos = NULL, type = "source")
if(!require("statgl")) {install.packages("statgl")}
pop_df <-
statgl_fetch(statgl_url("BEXBBPL",lang = "en"),
"mother's age" = px_all("*"),
parity = px_all("*"),
"mother's birthsday" = px_all("*"),
time = px_all("*"),
.eliminate_rest = TRUE )
pop_df <-
statgl_fetch(statgl_url("BEXBBPL",lang = "en"),
parity = px_all("*"),
"mother's birthsday" = px_all("*"),
time = px_all("*"),
.eliminate_rest = TRUE )
pop_df <-
statgl_fetch(statgl_url("BEXBBPL",lang = "en"),
time = px_all("*"),
.eliminate_rest = TRUE )
devtools::install_github("StatisticsGreenland/pxjob64Win")
library(pxjob64Win)
pxjob <- c(system.file(package = "pxjob64Win","PxJob64.exe"))
pxjob
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
tmp_file <- file.path('test')
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
maxtix <- file.path('test')
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
pxjob
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
tmp_file
matrix
maxtix <- file.path('test')
maxtrix <- file.path('test')
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
matrix
matrix <- file.path('test')
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
tmp_file <- file.choose()
tmp_file
matrix <- file.choose()
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
system(paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep=""))
c(system.file(package = "pxjob64Win","PxJob64.exe"))
system.file(package = "pxjob64Win", "PxJob64.exe")
?system
system()
system("")
system("echo")
devtools::load_all(".")
tmp_file
matrix
pxjob(tmp_file, matrix)
pxjob(tmp_file, matrix)
system(cat ~/test)
system("cat ~/test")
system("ls C:/)
""
system("ls C:/")
system("ls C:\\")
system(paste("ls", tmp_file))
tmp_file
shQuote(tmp_file)
system(paste("ls", shQuote(tmp_file)))
devtools::load_all(".")
pxjob(tmp_file, matrix)
system(system.file(package = "pxjob64Win", "PxJob64.exe"))
system(shQuote(system.file(package = "pxjob64Win", "PxJob64.exe")))
devtools::load_all(".")
pxjob(tmp_file, matrix)
devtools::load_all(".")
pxjob(tmp_file, matrix)
devtools::load_all(".")
devtools::load_all(".")
pxjob(tmp_file, matrix)
pxjob(tmp_file, matrix)
tmp_file
tmp_file <- file.choose()
pxjob(tmp_file, matrix)
tmp_file
devtools::load_all(".")
tmp_file
devtools::load_all(".")
pxjob(tmp_file, matrix)
output
matrix
input
tmp_file
input <- tmp_file
output <- matrix
output
system("ls")
system("pwd")
system(paste("ls", input))
system(paste("ls", shQuote(input)))
devtools::load_all(".")
pxjob(tmp_file, matrix)
file.path("C:",  "Users")
file.path('..', 'pxmake', 'tests', 'testthat', 'px', 'BEXSTA_small.px')
file.exists(file.path('..', 'pxmake', 'tests', 'testthat', 'px', 'BEXSTA_small.px'))
file.exists(file.path('BEXSTA_small.px'))
output <- file.path('BEXSTA_small.px')
input <- file.path('..', 'pxmake', 'tests', 'testthat', 'px', 'BEXSTA_small.px')
pxjob(input, output)
system(pxjob(input, output))
devtools::load_all(".")
system(pxjob(input, output))
devtools::load_all(".")
system(pxjob(input, output))
system("pwd")
input
absolutePath(input)
?absolutePath
normalizePath(input)
system(pxjob(normalizePath(input), normalizePath(output)))
?normalizePath
system(pxjob(normalizePath(input, winslash = "/"), normalizePath(output, winslash = "/")))
normalizePath(input, winslash = "/"), normalizePath(output, winslash = "/")
normalizePath(input, winslash = "/")
pxjob_path <- system.file(package = "pxjob64Win", "PxJob64.exe")
pxjob_path
paste(pxjob, " px" , " in=",tmp_file," out=",matrix,".px",sep="")
system(pxjob(normalizePath(input, winslash = "/"), normalizePath(output, winslash = "/")))
normalizePath(output, winslash = "/")
system(pxjob_path)
pxjob_path
system(pxjob_path)
system(shQuote(pxjob_path))
system(paste0(shQuote(pxjob_path), " px")
system(paste0(shQuote(pxjob_path), " px"))
system(paste0(shQuote(pxjob_path), " px in=", input))
system(paste0(shQuote(pxjob_path), " px in=", shQuote(input)))
paste0(shQuote(pxjob_path), " px in=", shQuote(input))
system(paste0(shQuote(pxjob_path))
)
system(paste0(shQuote(pxjob_path)))
system(paste0(pxjob_path, " px"))
system(shQuote(paste0(pxjob_path, " px")))
pxjob_path
system(paste0(shQuote(pxjob_path), " px")))
system(paste0(shQuote(pxjob_path), " px"))
system(paste0(shQuote(pxjob_path), " px in=", input))
input
normalizePath(input, winslash = '/')
system(paste0(shQuote(pxjob_path), " px in=", normalizePath(input, winslash = '/')))
system(paste0(shQuote(pxjob_path), " px in=", shQuote(normalizePath(input, winslash = '/'))))
system(paste0(shQuote(pxjob_path), ' px in=', normalizePath(input, winslash = '/')))
normalizePath(input, winslash = '/')
pxjob_path
shQuote(pxjob_path)
paste0(shQuote(pxjob_path), ' px in=', normalizePath(input, winslash = '/'))
?system
