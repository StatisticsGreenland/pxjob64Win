{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1035{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fnil\fcharset0 Courier New;}{\f2\fnil\fcharset0 Arial;}{\f3\fmodern\fprq1\fcharset0 Courier New;}{\f4\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green128\blue64;\red46\green116\blue181;\red102\green102\blue102;\red0\green0\blue255;\red0\green77\blue187;\red0\green0\blue0;\red0\green128\blue0;\red128\green0\blue0;}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\nowidctlpar\ri31\sb240\sa60\b\f0\fs28 PxJob \cf1 4.0\cf2\par
\cf0\ul\fs22 0.\ulnone\tab\ul General\ulnone\par
\b0 PxJob is the command line based sister product of \i PxEdit\i0  which uses the same source code.  It has most of the PxEdit functions available, and some functionality has been designed directly for it.  The main idea is to automate and simplify routine processes.\par
PxJob may be used for validating \f1\fs24 px\f0\fs22  files (e.g. as a part of the publication process), make database reports, convert files to other formats, add, update and remove metadata, join or split tables, combine variables and handle the table languages.\par
PxJob reads source files and processes result files according to the command line.  If the process encounters points where PxEdit asks for user input (e.g. replacing keyword or file replacing confirmation), PxJob will bypass these always answering \i yes\i0 .  The actions will be written in a separate log file.  If needed, the process may be shown in the Task Bar information bubble.\par
PxJob will always return a return code in the calling environment.  A successful operation will always return \f1\fs24 0\f0\fs22 , values \f1\fs24 11\f0\fs22  and \f1\fs24 12\f0\fs22  mean failing to read or write a file correspondingly.  Unsuccessful metadata file operation gives return codes \f1\fs24 13\f0\fs22  (no template file found), \f1\fs24 14\f0\fs22  (problem with the template file) or \f1\fs24 15\f0\fs22  (metadata injection \f1\fs24 csv\f0\fs22  file is not opened).  If the return code is greater than \f1\fs24 20\f0\fs22 , there is an internal  application error.\par
The command line parts are deliberately terse, the idea is to be able to put as much information in the command as possible.\par
\ul\i 0.1\ulnone\tab\ul Command files\ulnone\b\i0\par
\b0 PxJob may be run directly in the \i Windows Command Prompt\i0 .  The recommended way is to use separate \b command files \b0 (\f1\fs24 bat\f0\fs22  or \f1\fs24 cmd\f0\fs22  files), which make it easy to run the same commands repeatedly.  The command files are text files that contain command lines.  They may be run either in the Windows Command Prompt or by double-clicking in the File Manager.\par
For example creating the following (e.g. with \i Notepad\i0 ) file \f1\fs24 D:\\bat\\Tablerun.bat\f0\fs22 , which has just one command line:\par
\f1\fs24\tab D:\\PxEdit\\PxJob job=csv in=\b D:\\dbase\\Table.px \b0 out=\b D:\\out\\\b0\f0\fs22\par
When it is called in the Command Prompt (the file extension is not needed)\par
\f1\fs24\tab D:\\bat\\Tablerun\f0\fs22\par
the file \f1\fs24 D:\\dbase\\Table.px\f0\fs22  is converted to a \f1\fs24 csv\f0\fs22  formatted file \f1\fs24 Table.csv\f0\fs22  in the directory \line\f1\fs24 D:\\out\\\f2\fs22 .\f0\par
It is possible to include some programming logic in the command files.  \line For example the file \f1\fs24 D:\\bat\\Makecsv.bat\f0\fs22 : \par
\b\f1\fs24\tab @\b0 echo off\f0\line\f1\tab D:\\PxEdit\\PxJob job=csv in=\b %1 \b0 out=d:\\out\\\line\b\tab @\b0 pause\f0\fs22\par
This command file can be used by writing the source file name after it in the command window.  The command lines are not echoed on the screen (\f1\fs24 @echo off\f0\fs22 ) and the command window stays open.  If the source files are proper, the output \f1\fs24 csv\f0\fs22  files will be created in the directory \f1\fs24 D:\\out\\\f2\fs22 .\f0\par
\f1\fs24\tab D:\\bat\\Makecsv D:\\dbase\\Status.px\line\tab D:\\bat\\Makecsv Q:\\world\\denmark\\Turisme.px\fs22\par
\f2 The results for these commands are files \f1\fs24 D:\\out\\Status.csv\f2\fs22  and \f1\fs24 D:\\out\\Turisme.csv\f2\fs22 .\line The Command Prompt window uses DOS-ANSI character coding, which means that e.g. national characters may be problematic.  PxJob makes the character conversions based on the system language or the table language setting.\par

\pard\nowidctlpar\ri-21\sb240\sa60\cf1\ul\i\f0 0.2\ulnone\tab\ul Macro files\ulnone\b\i0\par
\b0 PxJob may use so called macro files as well.  The macro file extension is \f1\fs24 pxjob\f0\fs22 .\line When using macro files, the file name is the \b only \b0 input parameter.\line The following command types are possible:\par
\f1\fs24\tab PxJob in=macrofile.pxjob\line\tab PxJob macrofile.pxjob\line\tab PxJob macrofile\fs22\par
\f0 The macro file consists of PxJob commands, each in a separate line (without the program call, of course).  There may also be empty lines, comment lines (which start with a semicolon) and section headers (enclosed in square brackets).  The section headers will be written in the log file.\par
The macro files should make it easier to use non-ascii characters in the command line.  The macro files can also be slightly quicker to use because the interpreter will not be unloaded and loaded between the commands.\par
For example creating the following (e.g. with \i Notepad\i0 ) file \f1\fs24 D:\\bat\\Example.pxjob\f0\fs22 , which consists of the following lines:\par
\f1\fs24\tab [csv conversion]\line\tab ; the header above will be written in the log file\line\tab job=csv in=D:\\dbase\\Table.px out=D:\\csv\\\line\tab ; the empty line below will be skipped\line\line\tab [html conversion]\line\tab job=htm in=D:\\dbase\\Table.px out=D:\\html\\\f2\fs22\par

\pard\nowidctlpar\ri31\sb240\sa60\cf0\ul\i 0.3\ulnone\tab\ul Installation\ulnone\b\i0\f0\par
\b0 PxJob may be used from the PxEdit installation directory, using the common settings files.  If needed, PxJob may be copied to a separate directory.  When PxEdit is updated, the new \f1\fs24 paq\f0\fs22  file should be copied to this PxJob directory, too.\par
PxJob needs the following files:\line\line\f1\fs24\tab PxJob.exe\f0\fs22\tab\tab\tab\tab application loader\line\f1\fs24\tab PxEdit_\cf1 40\cf0 .paq\f0\fs22\tab\tab\tab source code\line\f1\fs24\tab Dyalog\cf1 170\cf0 rt_unicode.dll\f0\fs22\tab\i DyalogAPL \i0 command interpreter\line\par

\pard\nowidctlpar\ri-21\cf1 64 bit version needs the following files:\par

\pard\nowidctlpar\ri31\sb240\sa60\f1\fs24\tab PxJob32.exe\f0\fs22\tab\tab\tab application loader\line\f1\fs24\tab PxEdit64_40.paq\f0\fs22\tab\tab source code\line\f1\fs24\tab Dyalog170_64rt_unicode.dll\f0\fs22\tab\i DyalogAPL\i0  command interpreter\line\cf0\par

\pard\nowidctlpar\ri31 The following files may be needed:\line\line\f1\fs24\tab PxEdit_main_\cf1 40\cf0 .ini\f0\fs22\tab\tab main PxEdit settings file (e.g. for default values)\line\f1\fs24\tab PxEdit_lng_\b\i cc\b0\i0 _\cf1 40\cf0 .ini\f0\fs22\tab language file for language code \i cc\line\i0\f1\fs24\tab Zip.exe, Unzip.exe\f0\fs22\tab\tab\i Info-Zip \i0 archiver\line\f1\fs24\tab Xdf_\cf1 40\cf0 .ini\f0\fs22\tab\tab\tab\i CoSSI/XML \i0 settings file\line\par
The language files are needed especially when making the table title for languages that are not included in PxJob.  Included language codes are \i da\i0 , \i de\i0 , \i en\i0 , \i es\i0 , \i fi\i0 , \i fr\i0 , \i it\i0 , \i kl\i0 , \i no\i0 , \i pt\i0 , \i ru\i0 , \i sl\i0 , \i sv \i0 and \i uk\i0 .\par
\par
Excel functionality needs an installed \i Excel \i0 application (usually \i MS Office\i0 ).\par
\par
\cf2\par

\pard\nowidctlpar\ri31\sb240\sa60\cf0\ul\b 1.\ulnone\tab\ul Command line\fs24\line\ulnone\fs22\par

\pard\nowidctlpar\ri31\b0\f2 The command consists of PxJob call and the command line:\par
\line\b\f3\fs24 [\i drive:\\path\\\i0 ]PxJob\b0\{.exe\} \i command line\line\b\i0\par
\b0\i\f1\tab drive\i0 :\f0\fs22\tab\tab PxJob installation drive (e.g. \f1\fs24 D:\f0\fs22 )\line\f1\fs24\tab\\\i path\i0\\\f0\fs22\tab\tab home directory path (e.g. \f1\fs24\\PxEdit\\\f0\fs22 )\line\f1\fs24\tab PxJob\f0\fs22\tab\tab command line interpreter (file extension is not needed)\line\par
NB: the PxJob call is usually left off from the commands in this document for simplicity.\cf3\par
\b\f3\fs24\par
\cf0\b0\f2\fs22 The command line consists of the following parts:\line\b\f3\fs24\par
\b0\{\b job\b0\}[\b in\b0 ]\{\b out\b0\}\lang2057\{\b meta\b0\lang1035\}\{\b log\b0\}\{\b err\b0\}\lang2057\{\b\lang1035 copy\b0\lang2057\}\{\b set\b0\}\lang1035\{\b\lang2057 path\b0\lang1035\}\{-\i options\i0\}\{!\i switches\i0\}\par

\pard\nowidctlpar\ri31\sb240\sa60\f1\tab job\f0\fs22\tab\tab\tab job type\line\b\f1\fs24\tab in\b0\f0\fs22\tab\tab\tab source: file, file list, directory, or list file (mandatory)\line\f1\fs24\tab out\f0\fs22\tab\tab\tab target file or directory\line\f1\fs24\tab meta\f0\fs22\tab\tab\tab metadata file or directory or control file  \line\f1\fs24\tab log\f0\fs22\tab\tab\tab log file\line\f1\fs24\tab set\f0\fs22\tab\tab\tab settings file\line\f1\fs24\tab err\f0\fs22\tab\tab\tab directory for discarded source files\line\f1\fs24\tab copy\tab\tab\f0\fs22\tab directory for passed source files\line\f1\fs24\tab path\f0\fs22\tab\tab\tab common directory path\line\f1\fs24\tab -\i options\i0\f0\fs22\tab\tab options with modifiers start with a dash\line\f1\fs24\tab !\i switches\i0\f0\fs22\tab\tab switches start with an exclamation mark\par
The command line parts are separated with spaces, the order of the parts is not specified.\par
\ul\i 1.1\ulnone\tab\ul Parameters\ulnone\b\i0\par
\b0 Parameters are short keywords followed by equal sign (\f1\fs24 =\f0\fs22 ) and the modifier.  If the modifier contains spaces, it has to be delimited by quotes (\f3\fs24 "\f0\fs22 ).  Parameters are used for job type, source and target files and possible other main settings.\par
\ul\b\i\f1\fs24 job\ulnone\b0\f0\fs22\tab\ul batch type\i0\line\ulnone\par

\pard\nowidctlpar\ri31\f3\fs24\tab px\f0\fs22\tab\tab\tab\f1\fs24 px\f0\fs22  file (default)\par
\f3\fs24\tab csv\f0\fs22\tab\tab\tab\f1\fs24 csv\f0\fs22  file (either semicolon or tabulator separated text file)\par
\f3\fs24\tab exp\f0\fs22\tab\tab\tab\i eXplorer \i0 file (\f1\fs24 txt\f0\fs22 )\par
\f3\fs24\tab htm\f0\fs22\tab\tab\tab\f1\fs24 html\f0\fs22  file\par
\f3\fs24\tab report\f0\fs22\tab\tab database report (\f1\fs24 csv\f0\fs22 )\par
\f3\fs24\tab split\tab\f0\fs22\tab partial table (\f1\fs24 px\f0\fs22 , \f1\fs24 csv\f0\fs22  or \f1\fs24 xhtm\f0\fs22 )\f3\fs24\par
\tab sql\f0\fs22\tab\tab\tab\lang2057 PxSQL \lang1035 macro file (\f1\fs24 sql\f0\fs22 )\par
\f3\fs24\tab translate\f0\fs22\tab\tab create or read translation files (\f1\fs24 translate\f0\fs22 )\par
\f3\fs24\tab txt\f0\fs22\tab\tab\tab text table (either semicolon or tabulator-separated text file)\f3\fs24\par
\tab xls\f0\fs22\tab\tab\tab Excel table\par
\f3\fs24\tab xml\f0\fs22\tab\tab\tab\i CoSSI/XML\i0  file\par

\pard\nowidctlpar\ri31\sb240\sa60\f1\fs24 job\f0\fs22  defines the output file type. If it is missing, the job is thought to be of type \f1\fs24 px\f0\fs22 , unless the first part of the command line is not recognised.\par

\pard\nowidctlpar\ri-21\sb240\sa60\cf1 PxJob uses the system default decimal separator in \f3\fs24 csv\f0\fs22 , \f3\fs24 htm\f0\fs22  and \f3\fs24 txt\f0\fs22  outputs.  \line This may be changed with the \f3\fs24 q\f0\fs22  parameter if needed.\par

\pard\nowidctlpar\ri31\sb240\sa60\cf0 For example the commands\line\line\f1\fs24\tab PxJob job=\b px\b0  in=..\line\tab PxJob \b px\b0  in=..\line\tab PxJob in=..\par
\f0\fs22 are interpreted as of type \f1\fs24 px\f0\fs22 , the following ones are of type \f1\fs24 csv\f0\fs22 :\line\line\f1\fs24\tab PxJob job=\b csv\b0 ...\line\tab PxJob \b csv\par
\b0\f0\fs22 If the parameter contains file names or directories that have spaces or commas, the definition must be delimited with quotes.  The directory names should end with a backslash for clarity, especially when the directory does not exist but it should be created.\par
\f1\fs24\tab out=\b "\b0 D:\\my files\\Table.px\b "\line\b0\tab in=\b "\b0 D:\\dbase\\Population,2018.xls\b "\line\b0\tab out=D:\\out\\results\b\\\b0\par
\f2\fs22 The directory or file names should contain the whole path name, e.g. \f1\fs24 D:\\dbase\\Table.px\f2\fs22 .  It is possible, but not recommended, to use paths related to the run directory.  For example, if PxJob is in the directory \f1\fs24 D:\\dbase\\job\f2\fs22 , the file \f1\fs24 D:\\dbase\\job\\in\\New.px\f2\fs22  may be defined with \line\b\f1\fs24 .\b0\\in\\New.px\f2\fs22  and the file \f1\fs24 D:\\dbase\\work\\Old.px\f2\fs22  with \b\f1\fs24 ..\b0\\work\\Old.px\f2\fs22 .\cf3\par
\cf0 The directory path separator is backslash (\f1\fs24\\\f2\fs22 ), but the slash character (\f1\fs24 /\f2\fs22 ) is allowed as well:\line\f0\tab\line\f1\fs24\tab D:\b\\\b0 dbase\b\\\b0 Population.px\line\tab D:\b /\b0 dbase\b /\b0 Population.px\ul\b\i\par
in\ulnone\b0\f0\fs22\tab\ul source description (mandatory)\ulnone\i0\par
The source files may be defined in many ways.  A single file name may be given directly:\line\tab\line\f1\fs24\tab in=D:\\dbase\\Population.px\f0\fs22\par
If the file name contains spaces or commas, it has to be given in quotes:\par
\f1\fs24\tab in="D:\\dbase\\Population, 2018.px"\f0\fs22\par
A few files may be given as a comma-separated input file list.  There should not be spaces around the comma.  If all the files reside in the same directory, only the first file needs to have the full file path:  \line\tab\line\f1\fs24\tab in=D:\\dbase\\Population.px\b ,\b0 D:\\dbase\\Industry1.px\line\tab in=\b D:\\dbase\\\b0 Population.px\b ,\b0 Industry1.px\f0\fs22\par
Wildcards are allowed in the file names:\par
\f1\fs24\tab in=D:\\dbase\\\b *\b0 2019.px\b ,\b0 Industry\b ?\b0 .px\f0\fs22\par
Usually it is convenient to put all the input files in one directory.  In this case, the definition needs only to contain the directory name.  If there is need to include all the sub-directories, the option \f1\fs24 -s\f0\fs22  should be used.\par
\f1\fs24\tab in=D:\\dbase\b\\\b0\line\tab in=D:\\dbase\\ \b -s\f0\fs22\par
\b0 As default, only \f1\fs24 px\f0\fs22  files will be read, other file types are defined with the option \f1\fs24 -i\f0\fs22 .\par
\f1\fs24\tab in=D:\\dbase\\ \b -ipx,csv\line\b0\tab in=D:\\dbase\\ \b -i*\b0\f0\fs22\par
The option \f1\fs24 -y\f2\fs22  filters only the youngest, i.e. those files that have been recently updated.  For example, selecting the files that have been updated during the last two hours:\par
\f1\fs24\tab in=D:\\dbase\\ -s \b -y0.2\b0\f0\fs22\par
Writing multiple files in the command line is tedious and prone to errors.  A convenient way is to use simple text files with the extension \f1\fs24 lst\f0\fs22  (or \f1\fs24 list\f0\fs22 ).  The file contains one file with full path name per row.  If only the first file name has the path name, it is used for each file name in the file.\par
\f1\fs24\tab in=D:\\in\\Database\b .lst\b0\f0\fs22\par
\f2\lang2057 If all the input files have a common path, it will be used when the output directory is created with the option \line\f1\fs24\lang1035 -s1\f2\fs22\lang2057 .  All the lines that start with a semicolon are treated as comments.\cf3\f0\lang1035\par
\cf0 The input file or directory may have the server definition, in which case the string starts with two backslashes:\par
\f1\fs24\tab in={\b{\field{\*\fldinst{HYPERLINK "\\\\\\\\server.stat.fi\\\\dbase\\\\Population.px"}}{\fldrslt{\\\\\b0 server.stat.fi\\dbase\\Population.px\ul0\cf0}}}}\f0\fs22\par
It is possible to use a separate web address, in which case the string starts with \f1\fs24 http:\f0\fs22\line\line\f1\fs24\tab in=\b http:\b0\\\\pxnet.stat.fi\\dbase\\Population.px,Industry?.csv\par
\ul\b\i out\ulnone\b0\f2\fs22\tab\ul output file or directory\ulnone\b\i0\f0\par
\b0 If there is no output definition, the output files will be written in the source directory, possibly replacing the original files.  This may lead to unwanted results, especially when using the expunge switch \f1\fs24 !x\f0\fs22 .\par
The resulting file name will consist of the source file name and the output file extension.\b\par
\b0 A single output file definition is practical to use when there is only one source file, joining tables (\f1\fs24 -j\f0\fs22 ) or archiving several files in a single file (\f1\fs24 -z\f0\fs22 ).  In a case when there are many input files but only one output file definition, only the last source file will be saved.  The output files will not be saved if the user does not have writing permission for the output directory, though.\par
\f1\fs24\tab out=D:\\out\\New.px\line\tab out=\b "D\b0 :\\my files\\Result.px\b "\par
\cf1\b0\f2\fs22 The output file name may also be created from any of the keywords \i CONTENTS\i0 , \i DESCRIPTION\i0 , \i MATRIX \i0 or \i TABLE-ID \i0 by using the keyword as a file name, and a \b colon \b0 in front of it.\par
\f1\fs24\tab out=D:\\out\\\b :\b0 matrix\f0\fs22\par
\cf0 If the output directory does not exist, it will be created at the beginning of the batch job.\par
\f1\fs24\tab out=D:\\out\\new_data\b\\\f0\fs22\par
\b0 The output file will be saved with the file extension according to the job.  For most of the jobs the default output format may be changed using the option \f1\fs24 -o\f0\fs22 .  For example the default format for \f1\fs24 xml\f0\fs22  files is \i xdf\i0 , but it may be changed to \i cals\i0 :\par
\f1\fs24\tab job=xml in=D:\\dbase\\industry\\ out=D:\\out\\industry\\ \b -o2\f0\fs22  \par
\b0 As default, the output files will be written in lowercase, the spaces are replaced by underscores and national characters are replaced by their ascii equivalents.  These changes may be prevented with the option \f1\fs24 -b\f0\fs22 .\par
Other options and switches allow e.g. setting the character conversions (\f1\fs24 -c\f0\fs22 ), dot and dash code changes \line (\f1\fs24 -d\f0\fs22 , \f1\fs24 -f\f0\fs22 ), decimal and thousand separators (\f1\fs24 -q\f0\fs22 ) and decimal precisions (\f1\fs24 -p\f0\fs22 ).\par
\ul\b\i\f1\fs24 log\ulnone\b0\f0\fs22\tab\ul log file\ulnone\b\i0\par
\b0 The default name of the log file is \f1\fs24 PxJob_\i timestamp\i0 .log\f0\fs22  (e.g. \f1\fs24 PxJob_20190404.log\f0\fs22 ).  The log records are written in English at the end of the file, an existing log file is not deleted.  If the log directory does not exist, PxJob will \b not \b0 try to create it.\par
\b\f1\fs24\tab log=D\b0 :\\dbase\\logs\\Run-log.txt\par
\f0\fs22 The default file extension is \f1\fs24 log\f0\fs22 .  Log file writing may be prevented with the switch \f1\fs24 !o.\par
\ul\b\i meta\ulnone\b0\tab\ul\f0\fs22 metadata or control file\ulnone\i0\par
Metadata source can be defined in several ways.  A single \f1\fs24 px\f0\fs22  or \f1\fs24 pxk\f0\fs22  file (which is similar to the \f1\fs24 px\f0\fs22  file without the data part) is handy for example in standardising keywords.  The metadata file (template file) need \b not \b0 be fully validated.\par
\b\f1\fs24\tab meta=D\b0 :\\dbase\\meta\\Template.\b pxk\f0\fs22\par
\b0 Metadata parameter may define a directory, and in that case PxJob tries to find a corresponding template file, either with the same name or having the same file name beginning, and use that for the metadata source.\par
\f1\fs24\tab meta=D:\\dbase\\templates\b\\\b0\line\tab meta=\b "D\b0 :\\my files\\templates\\\b "\f0\fs22\par
\b0 The recommended metadata update method is to use a special \f1\fs24 csv\f0\fs22  file for metadata injection (see 1.4).  \line\line\f1\fs24\tab meta=D:\\dbase\\meta\\Control.csv\b\f0\fs22\par
\b0 In some job types there are special control file or directory settings:\par
\f1\fs24\tab job=\b translate \b0 meta=D:\\dbase\\langs\\\line\tab job=\b report \b0 meta=D:\\dbase\\meta\\Report-control.csv\line\tab job=\b split \b0 meta=D:\\dbase\\meta\\Partial.csv\line\tab job=\b csv \b0 meta=D:\\dbase\\meta\\Keywords.csv \b -o3\b0\line\tab meta=D:\\statfin\\meta\\Filelist.csv \b !h\b0\f0\fs22\par
\ul\b\i\f1\fs24 set\ulnone\b0\tab\ul\f0\fs22 settings file\cf3\ulnone\b\i0\par
\cf0\b0 PxJob tries to use the PxEdit main setup file (\f1\fs24 PxEdit_main_\cf1 40\cf0 .ini\f0\fs22 ) in the startup directory, if found.  The personal setup file (\f1\fs24 PxEdit_\cf1 40\cf0 .ini\f0\fs22 ) is not used, though.  If needed, the additional setup file may be defined with the \f1\fs24 set\f0\fs22  parameter, e.g. for using default metadata.  The setup file needs only to have the needed sections (such as \f1\fs24 [defaults]\f0\fs22 ).\b\par
\b0\f1\fs24\tab set=D:\\PxJob\\Jobsettings\b .ini\b0\line\tab set="D:\\my files\\Defaults.ini"\par
\ul\b\i err\ulnone\b0\tab\ul\f0\fs22 directory for discarded files\ulnone\b\i0\par
\b0 Usually the non-severe metadata problems are just written to the log file, but otherwise the output files will be made.  With the \f1\fs24 err\f0\fs22  parameter only fully valid \f1\fs24 px\f0\fs22  files will be handled, the others will be copied untouched to the defined directory.  If the directory does not exist, it will be created.  The source files are not removed as default, that can be done with the switch \f1\fs24 !x\f0\fs22 .\par
\f1\fs24\tab err=D:\\dbase\\problems\\\line\tab err="D:\\my files\\problems\\"\f2\fs22\par
\f0 The error sensitivity may be changed back to normal with the option \f1\fs24 -e\f2\fs22 .\par
\ul\b\i\f1\fs24 copy\ulnone\b0\tab\ul\f0\fs22 directory for passed files\ulnone\b\i0\par
\b0 All the source files will be copied to the defined directory untouched.  If the \f1\fs24 err\f0\fs22  parameter is in use, only those source files that pass the metadata checking will be copied.  If the directory does not exist, it will be created.  The source files are not removed as default, that can be done with the switch \f1\fs24 !x\f0\fs22 .\par
\f1\fs24\tab copy=D:\\dbase\\ok\b\\\b0\line\tab copy="D:\\my files\\ok\\"\b\f0\fs22\par
\ul\i\f1\fs24 path\ulnone\f0\fs22\tab\ul\b0 mutual path setting for the command line\cf3\ulnone\b\i0\par
\cf0\b0 This setting is meant just to simplify the command line.  The parameter contains the common beginning of the file path.  The file or directory definitions, which start with a backslash, will get the common path.  \line For example, the following settings are equivalent:\par
\f1\fs24\tab in=D:\\dbase\\in\\File.px out=D:\\dbase\\out\\ meta=D:\\dbase\\meta\\\line\tab in=\\in\\File.px out=\\out\\ meta=\\meta\\ \b path=D\b0 :\\dbase\\\line\par
\ul\f2\fs22 1.2\ulnone\tab\ul\i\f0 Options\ulnone\b\i0\par
\b0 Options are used for fine-tuning the commands.  Options start with dash followed by one character and there may be a modifier.\cf3\par
\cf0\i Options that may be given in one group:\i0\par
\b\f1\fs24 -a\b0\f0\fs22\tab add and modify keywords and reorder variables\line\tab used with the control file given with the \f1\fs24 meta\f0\fs22  parameter\line\i\tab N.B. with \f1\fs24 px\f0\fs22  output, the \f1\fs24 csv\f0\fs22  file will always be handled as control file\i0\par
\b\f1\fs24 -b\b0\f0\fs22\tab bypass the standard file name conversions\line\f1\fs24\tab -b_\f0\fs22\tab\tab leave spaces in the names [default: convert spaces to undescores]\line\f1\fs24\tab -b=\f0\fs22\tab\tab leave character cases [default: convert to lower case]\line\f1\fs24\tab -b~\f0\fs22\tab\tab leave national characters [default: convert to corresponding ASCII characters]\line\f1\fs24\tab -b/\f0\fs22\tab\tab convert path separators to slashes in reports\par
\tab modifiers may be combined, e.g. \f1\fs24 -b~_\f0\fs22\par
\b\f1\fs24 -c\b0\f0\fs22\tab character coding for the output file [default: \f1\fs24 -c0\f0\fs22 ]\line\f1\fs24\tab -c0\f0\fs22\tab\tab WinANSI\line\f1\fs24\tab -c1\f0\fs22\tab\tab Unicode (UTF-8) (\f1\fs24 -c\f0\fs22 )\line\cf1\f1\fs24\tab -c2\f0\fs22\tab\tab ISO-8859\line\f1\fs24\tab -c10\f0\fs22\tab\tab WinANSI (DOS coding when reading, if \i CHARSET \i0 keyword is missing)\line\cf0\f1\fs24\tab -c11\f0\fs22\tab\tab Unicode ( - " - )\line\tab\f1\fs24 -c12\f0\fs22\tab\tab ISO-8859 ( - " - )\cf5\line\cf1\f1\fs24\tab -c20\f0\fs22\tab\tab WinANSI (ignore the \i CODEPAGE \i0 setting when reading)\line\f1\fs24\tab -c21\f0\fs22\tab\tab Unicode ( - " - )\line\f1\fs24\tab -c22\f0\fs22\tab\tab ISO-8859 ( - " - )\par
\cf0\b\f1\fs24 -d\b0\f0\fs22\tab dash code conversion when reading structural tables [default: fill item]\line\f1\fs24\tab -d0\f0\fs22\tab\tab convert to zero\line\f1\fs24\tab -d..\f0\fs22\tab\tab convert to two dots\line\line\tab dashes may be converted to any dot code or zero\par
\b\f1\fs24 -e\b0\f0\fs22\tab error sensitivity with the \f1\fs24 err\f0\fs22  parameter [default: \f1\fs24 -e0\f0\fs22 ]\line\f1\fs24\tab -e0\f0\fs22\tab\tab only fully valid files will pass\line\f1\fs24\tab -e1\f0\fs22\tab\tab normal level: metadata warnings are tolerated (\f1\fs24 -e\f0\fs22 )\par
\b\f1\fs24 -f\b0\f0\fs22\tab fill item setting (missing or invalid data) [default: \f1\fs24 ..\f0\fs22 ]\line\f1\fs24\tab -f0\f0\fs22\tab\tab zero\line\f1\fs24\tab -f..\tab\f0\fs22\tab two dots\line\line\tab fill item may be any dot code or zero\par
\b\f1\fs24 -h\b0\f0\fs22\tab service batches (tailored mainly for Statistics Finland's internal use)\line\f1\fs24\tab 6\f0\fs22\tab\tab key figures setting (variable order: \i Region\i0 , \i Information\i0 , \i Year\i0 )\line\tab\f1\fs24 7\tab\tab\f0\fs22 variable-value listings for each input table\line\f1\fs24\tab 8\f0\fs22\tab\tab create the \i eXist\i0  update file (\f1\fs24 csv\f0\fs22 )\line\f1\fs24\tab 9\f0\fs22\tab\tab metadata listings of each directory (\f1\fs24 json\f0\fs22 )\line\f1\fs24\tab 10\f0\fs22\tab\tab publishing pipeline (\f1\fs24 !h\f0\fs22 ) without file name changing\line\tab\f1\fs24 11\f0\fs22\tab\tab\i StatFin \i0 quality report\line\tab\cf1\f1\fs24 12\f0\fs22\tab\tab publishing pipeline (\f1\fs24 !h\f0\fs22 ), file name checking also for PxPro tables\cf0\line\f1\fs24\tab 25\f0\fs22\tab\tab search interesting data values (default value is \f1\fs24 25\f0\fs22 , may be set with option \f1\fs24 -v\f0\fs22 )\par
\b\f1\fs24 -k\b0\f0\fs22\tab create missing codes\line\f1\fs24\tab -k1\f0\fs22\tab\tab use the corresponding value texts of the main language (\f1\fs24 -k\f0\fs22 )\line\tab\tab\tab if there are unique space separated prefixes for all texts, use them\line\f1\fs24\tab -k2\f0\fs22\tab\tab use the corresponding value texts of the main language only\line\f1\fs24\tab -k3\f0\fs22\tab\tab create sequential zero-padded numeric codes\line\tab\tab\tab if all the corresponding value texts are numeric, use them\line\f1\fs24\tab -k4\tab\tab\f0\fs22 create sequential zero-padded numeric codes only\line\line\tab only empty code lists will be created, i.e. if only some codes are empty, they will not be replaced\line\line\f1\fs24\tab -k11..14\tab\f0\fs22 all empty codes for ragged lists will be replaced\line\f1\fs24\tab -k21..24\tab\f0\fs22 ragged code lists will be replaced wholly\par
\b\f1\fs24 -m\b0\f0\fs22\tab add default metadata from the settings file\line\f1\fs24\tab -m1\f0\fs22\tab\tab add missing values only (\f1\fs24 -m\f0\fs22 )\line\f1\fs24\tab -m2\f0\fs22\tab\tab replace existing keywords, too\line\line\tab default metadata will be added after all other possible metadata operations\par
\b\f1\fs24 -o\b0\f0\fs22\tab output file format [default: \f1\fs24 -o0\f0\fs22 ]\line\f1\fs24\tab job=px\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab\f1\fs24 px\f0\fs22\line\tab\tab\tab\tab\f1\fs24 -o1\tab pxk\f0\fs22  (metadata file)\line\tab\tab\tab\tab\f1\fs24 -o2\tab px\f0\fs22  (sparse data format)\line\f1\fs24\tab job=csv\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab semicolon separated\line\tab\tab\tab\tab\f1\fs24 -o1\tab\f0\fs22 tabulator separated\line\tab\tab\tab\tab\f1\fs24 -o2\tab\f0\fs22 comma separated\line\tab\tab\tab\tab\f1\fs24 -o3\tab\f0\fs22 metadata-\f1\fs24 csv\f0\fs22 , verbose output\line\tab\tab\tab\tab\f1\fs24 -o4\tab\f0\fs22 metadata-\f1\fs24 csv\f0\fs22 , repeated values included\line\tab\tab\tab\tab\f1\fs24 -o5\f0\fs22\tab semicolon separated, file extension is \f1\fs24 xls\f0\fs22  (see also \f1\fs24 !q\f0\fs22 )\tab\tab\tab\tab\tab\cf1\tab\f1\fs24 -o6\tab\f0\fs22 semicolon separated csv, all variables in rows\cf0\line\f1\fs24\tab job=htm\f0\fs22\tab\tab\f1\fs24 -o0\tab\f0\fs22 grey background colours for cells\line\tab\tab\tab\tab\f1\fs24 -o1\tab\f0\fs22 PxEdit background colours for cells\line\cf1\tab\tab\tab\tab\f1\fs24 -o2\tab\f0\fs22 no cell colouring\line\tab\tab\tab\tab\f1\fs24 -o3\tab\f0\fs22 html table\line\cf0\f1\fs24\tab job=report\f0\fs22\tab\f1\fs24 -o0\f0\fs22\tab semicolon separated\line\tab\tab\tab\tab\f1\fs24 -o1\tab\f0\fs22 tabulator separated\line\tab\tab\tab\tab\f1\fs24 -o2\tab\f0\fs22 comma separated\line\f1\fs24\tab job=split\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab\f1\fs24 px\f0\fs22  (see also \f1\fs24 !n\f0\fs22 )\line\tab\tab\tab\tab\f1\fs24 -o1\f0\fs22\tab\f1\fs24 csv\f0\fs22 , semicolon separated\line\tab\tab\tab\tab\f1\fs24 -o2\f0\fs22\tab\f1\fs24 xls\f0\fs22\line\tab\tab\tab\tab\f1\fs24 -o3\f0\fs22\tab\f1\fs24 htm\f0\fs22 , grey background colours\line\tab\tab\tab\tab\f1\fs24 -o4\f0\fs22\tab\f1\fs24 htm\f0\fs22 , PxEdit background colours\line\tab\cf1\tab\tab\tab\f1\fs24 -o5\tab htm\f0\fs22 , no cell colouring\cf0\line\f1\fs24\tab job=sql\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab make all INSERT macros\line\tab\tab\tab\tab\f1\fs24 -o1\f0\fs22\tab make meta INSERT macros only\line\tab\tab\tab\tab\f1\fs24 -o2\f0\fs22\tab make data INSERT macros only\line\tab\tab\tab\tab\f1\fs24 -o3\f0\fs22\tab data part in \f1\fs24 csv\f0\fs22  format\line\tab\tab\tab\tab\f1\fs24 -o4\f0\fs22\tab DROP, CREATE and all INSERT macros\line\tab\tab\tab\tab\f1\fs24 -o5\f0\fs22\tab DROP, CREATE and meta INSERT macros\line\cf5\f1\fs24\tab\cf0 job=translate\cf1\f0\fs22\tab\f1\fs24 -o0\f0\fs22\tab all languages in one file\line\tab\tab\tab\tab\f1\fs24 -o1\tab\f0\fs22 languages in separate files (with the language code)\line\cf0\f1\fs24\tab job=xls\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab\f1\fs24 xls\f0\fs22  (\f1\fs24 xlsx\f0\fs22 , if the table is too big for \f1\fs24 xls\f0\fs22  format)\line\tab\tab\tab\tab\f1\fs24 -o1\f0\fs22\tab\f1\fs24 xlsx\f0\fs22\line\f1\fs24\tab job=xml\f0\fs22\tab\tab\f1\fs24 -o0\f0\fs22\tab XDF formatted (\f1\fs24 _xdf.xml\f0\fs22 )\line\tab\tab\tab\tab\f1\fs24 -o1\f0\fs22\tab CALS formatted (\f1\fs24 _cals.xml\f0\fs22 )\line\tab\tab\tab\tab\f1\fs24 -o2\f0\fs22\tab KEYS formatted (\f1\fs24 _keys.xml\f0\fs22 )\line\line\tab the footnotes will be set as cell comments in \f1\fs24 xls\f0\fs22  output, if the \f1\fs24 !n\f0\fs22  switch is not in use\line\line\tab the footnotes for \f1\fs24 csv\f0\fs22 , \f1\fs24 htm\f0\fs22 , \f1\fs24 split\f0\fs22  and \f1\fs24 xls\f0\fs22  output may be limited to contain only \i NOTE \line\tab   \i0 keywords by adding \f1\fs24 10\f0\fs22  in the modifier, e.g.: \line\line\f1\fs24\tab  job=htm\f0\fs22\tab  \tab\f1\fs24 -o\b 1\b0 1\f0\fs22\tab PxEdit background, only \i NOTE\i0  keywords with the \f1\fs24 !n\f0\fs22  switch\line\tab   \f1\fs24 job=split\f0\fs22\tab  \tab\f1\fs24 -o\b 1\b0 2\f0\fs22\tab\f1\fs24 xls\f0\fs22  output, only \i NOTE\i0  keywords with the \f1\fs24 !n\f0\fs22  switch\par
\b\f1\fs24 -p\b0\f0\fs22\tab the separator used in variable combining [default: \f1\fs24 /\f0\fs22 ]\line\f1\fs24\tab -p-\f0\fs22\tab\tab dash\line\f1\fs24\tab -p::\f0\fs22\tab\tab two colons\line\f1\fs24\tab -p" - "\f0\fs22\tab string containing spaces\par
\b\f1\fs24 -q\b0\f0\fs22\tab data formatting for \f1\fs24 xml\f0\fs22 /Cals output [default: \f1\fs24 -q.\f0\fs22 ]\line\f1\fs24\tab -q.\f0\fs22\tab\tab dot for decimals, no thousand separator \cf1 (\f1\fs24 csv\f0\fs22 , \f1\fs24 htm\f0\fs22  and \f1\fs24 txt\f0\fs22 , too)\cf0\line\f1\fs24\tab -q,\f0\fs22\tab\tab comma for decimals, no thousand separator\cf1  (\f1\fs24 csv\f0\fs22 , \f1\fs24 htm\f0\fs22  and \f1\fs24 txt\f0\fs22 , too)\cf0\line\f1\fs24\tab -g.,\f0\fs22\tab\tab dot for decimals, comma for thousands\line\f1\fs24\tab -g,.\f0\fs22\tab\tab comma  for decimals, dot for thousands\line\f1\fs24\tab -q~\f0\fs22\tab\tab non-breaking space for thousands (\f1\fs24 -q.~\f0\fs22 )\line\f1\fs24\tab -q,~\f0\fs22\tab\tab comma for decimals, non-breaking space for thousands\line\f1\fs24\tab -q_\f0\fs22\tab\tab space for thousands (\f1\fs24 -q._\f0\fs22 )\line\f1\fs24\tab -q,_\f0\fs22\tab\tab comma for decimals, space for thousands\line\f1\fs24\tab -q'\f0\fs22\tab\tab apostrophe for thousands (\f1\fs24 -q.'\f0\fs22 )\line\f1\fs24\tab -q,'\f0\fs22\tab\tab comma for decimals, apostrophe for thousands\par
\b\f1\fs24 -r\b0\f0\fs22\tab replace metadata (given by \f1\fs24 meta\f0\fs22  parameter) [default: \f1\fs24 -r0\f0\fs22 ] \line\f1\fs24\tab -r0\f0\fs22\tab\tab add only missing and suitable keywords\line\f1\fs24\tab -r1\f0\fs22\tab\tab replace all possible keyword values (\f1\fs24 -r\f0\fs22 )\line\f1\fs24\tab -r2\f0\fs22\tab\tab add missing keywords and replace variable names from template file \line\tab\tab\tab (if the number of variables matches)\line\f1\fs24\tab -r3\f0\fs22\tab\tab replace all possible keyword values and variable names\par
\b\f1\fs24 -s\b0\f0\fs22\tab read sub-directories (if there is only one input directory)\line\f1\fs24\tab -s1\f0\fs22\tab\tab reflect the input directory structure in output (\f1\fs24 -s\f0\fs22 )\line\f1\fs24\tab -s2\f0\fs22\tab\tab read the sub-directories but write to the output directory only\par
\b\f1\fs24 -t\b0\f0\fs22\tab title type and hierarchy (\f1\fs24 csv\f0\fs22 , \f1\fs24 htm\f0\fs22 , \f1\fs24 txt\f0\fs22  and \f1\fs24 xls\f0\fs22 ) [default: \f1\fs24 -t0\f0\fs22 ] \line\cf1\f1\fs24\tab -t0\f0\fs22\tab\tab hierarchical value texts\line\f1\fs24\tab -t3\f0\fs22\tab\tab hierarchical value codes and texts\line\f1\fs24\tab -t10\f0\fs22\tab\tab all value texts\line\f1\fs24\tab -t13\f0\fs22\tab\tab all value codes and texts\line\line\tab\i used only in \f1\fs24 htm\f0\fs22  and \f1\fs24 txt\f0\fs22  output:\i0\line\f1\fs24\tab -t1\tab\tab\f0\fs22 hierarchical value codes\line\f1\fs24\tab -t2\f0\fs22\tab\tab hierarchical value codes and texts combined\line\f1\fs24\tab -t11\f0\fs22\tab\tab all value codes\line\f1\fs24\tab -t12\f0\fs22\tab\tab all value codes and texts\line\cf0\line\tab\i used only in \f1\fs24 htm\f0\fs22  output:\i0\line\f1\fs24\tab -t20\f0\fs22\tab\tab hierarchical value texts, one row column like in PxWin\line\tab\tab\tab variables ordered as in the table\line\f1\fs24\tab -t21\f0\fs22\tab\tab hierarchical value codes ( - " - )\line\f1\fs24\tab -t22\f0\fs22\tab\tab hierarchical value codes and texts ( - " - )\line\f1\fs24\tab -t30\f0\fs22\tab\tab hierarchical value texts, one row column like in PxWin\line\tab\tab\tab the last variable will be in columns only\line\f1\fs24\tab -t31\f0\fs22\tab\tab hierarchical value codes ( - " - )\line\f1\fs24\tab -t32\f0\fs22\tab\tab hierarchical value codes and texts ( - " - )\par
\b\f1\fs24 -u\b0\f0\fs22\tab set the \i LAST-UPDATED\i0  keyword \line\tab\f1\fs24 -u\f0\fs22\tab\tab\tab\tab use the current date\line\f1\fs24\tab -uvvvvkkpp_hh:mm\f0\fs22\tab set the defined date and time (NB: the undescore)\line\tab\f1\fs24 -u+\i n\i0\tab\tab\tab\f0\fs22\tab set the date \i n\i0  days later than current date\line\f1\fs24\tab -u+\i n\i0 _hh:mm\f0\fs22\tab\tab set the date and time \i n\i0  days later than the current date\line\line\f1\fs24\tab\f0\fs22 if the calculated date would be a weekend, it will be changed to the next Monday (see \f1\fs24 -w\f0\fs22 )\par
\b\f1\fs24 -w\b0\f0\fs22\tab define weekend days (for \f1\fs24 -u+\f0\fs22  option) [default: \f1\fs24 -w56\f0\fs22 ] \line\f1\fs24\tab -w56\f0\fs22\tab\tab Saturday and Sunday\line\f1\fs24\tab -w45\f0\fs22\tab\tab Friday and Saturday\line\f1\fs24\tab -w7\f0\fs22\tab\tab no weekend skipping\line\line\tab weekdays are numbered from Monday (\f1\fs24 0\f0\fs22 ) to Sunday (\f1\fs24 6\f0\fs22 )\par
\tab\i used only in \f1\fs24 htm\f0\fs22  output:\i0\line\f1\fs24\tab -w\i nnn\i0\f0\fs22\tab set the default width for the first column in at \i nnn \i0 pixels\par
\b\f1\fs24 -x\b0\f0\fs22\tab fine-tune the table title in other than \f1\fs24 px\f0\fs22  output [default: \f1\fs24 -x0\f0\fs22 ]\line\f1\fs24\tab -x0\f0\fs22\tab\tab\f1\fs24 px\f0\fs22  style (\i CONTENTS\i0  and variables or \i DESCRIPTION\i0 )\line\f1\fs24\tab -x1\f0\fs22\tab\tab\i CONTENTS \i0 (without variable names)  (\f1\fs24 -x\f0\fs22 )\line\f1\fs24\tab -x2\f0\fs22\tab\tab\i DESCRIPTION\i0 , or if it is missing, \i CONTENTS\i0\par
\b\f1\fs24 -y\b0\f0\fs22\tab source file freshness (\i ddd\{.hh\{.mm\}\{+\{\{dd.\}hh.\}mm\}\i0 )\line\f1\fs24\tab -y7\f0\fs22\tab\tab\tab files updated during last week\line\f1\fs24\tab -y1+5\f0\fs22\tab\tab files updated during the day but not during the last five minutes\line\f1\fs24\tab -y+2.0\f0\fs22\tab\tab files not updated during the last two hours\line\f1\fs24\tab -y14+2.0.0\f0\fs22\tab files updated during the last two weeks but not during the last two days\line\line\tab if the \f1\fs24 -y\f0\fs22  option is being used with reporting and the output file exists, the new report records \line\tab   will be added to the existing report file instead of deleting it first\par
\b\f1\fs24 -z\b0\f0\fs22\tab zip output files to archives\line\f1\fs24\tab -z1\f0\fs22\tab\tab all files will be zipped separately with the original file name (\f1\fs24 -z\f0\fs22 )\line\f1\fs24\tab -z2\f0\fs22\tab\tab all the files in the same directory will be zipped in the same archive\line\tab\tab\tab the archive file will be named after the directory name\line\f1\fs24\tab -z3\f0\fs22\tab\tab all the files in the same directory will be zipped in the same archive\line\tab\tab\tab the archive file will be named after the directory path name\line\tab\tab\tab (the path separators will be changed to underscores)\line\line\tab archiving uses the separate \i Info-Zip \i0 archiver (\f1\fs24 Zip.exe\f0\fs22 ) which is included in the package\line\tab if the \f1\fs24 out\f0\fs22  parameter is used, all \-\f1\fs24 -z\f0\fs22  options work as \f1\fs24 -z1\f0\fs22\line\tab if the \f1\fs24 out\f0\fs22  parameter defines a single output file and the option \f1\fs24 -s\f0\fs22 , is in use, the source\line\tab   directory structure will be copied in the archive file\line\tab if the \f1\fs24 out\f0\fs22  parameter defines a single output directory, all the files will be archived separately\line\tab if there is no \f1\fs24 out\f0\fs22  parameter, the files will be archived in the source directories\line\line\i Options that must be given separately:\i0\f1\fs24\par
\b -g\b0\f0\fs22\tab comma-separated list of variables to be grouped (combined)\line\f1\fs24\tab -gYear,Month\tab\f0\fs22\tab\tab combine variables \f1\fs24 Year\f0\fs22  and \f1\fs24 Month\f0\fs22  (if they exist)\line\f1\fs24\tab -g"Pop,2018","Ad hoc"\f0\fs22\tab quotes needed with spaces or commas \line\f1\fs24\tab -gSTUB\f0\fs22\tab\tab\tab\tab combine all row variables\line\f1\fs24\tab -gHEADING\tab\tab\f0\fs22\tab\tab combine all column variables\line\line\tab the variable names are given in the main language (names are not case sensitive)\line\tab the new variable name may be given with option \f1\fs24 -v\f0\fs22\line\tab the combination character for value texts and codes may be set with option \f1\fs24 -p\f0\fs22  [default: \f1\fs24 /\f0\fs22 ]\line\tab when combining two variables the first one has an existing \i TIMEVAL\i0  setting, \line\tab  the new \i TIMEVAL\i0  is set if possible (see the switch \f1\fs24 !t\f0\fs22 ) \par
\b\f1\fs24 -i\b0\f0\fs22\tab comma-separated list of input file extensions [default: \f1\fs24 -ipx\f0\fs22 ]\line\f1\fs24\tab -icsv,txt\f0\fs22\tab\tab read only \f1\fs24 csv\f0\fs22  and \f1\fs24 txt\f0\fs22  files\line\f1\fs24\tab -i*\f0\fs22\tab\tab\tab read all files\par
\b\f1\fs24 -j\b0\f0\fs22\tab joining options (correspond quite well with the PxEdit joining window options)\line\f1\fs24\tab -ja\f0\fs22\tab\tab replace all metadata (surpasses \f1\fs24 -r\f0\fs22 )\line\f1\fs24\tab -jb\tab\tab\f0\fs22 merge new values (between) the original ones after joining (if possible)\line\f1\fs24\tab -jc\f0\fs22\tab\tab do not use codes for variable matching\line\f1\fs24\tab -je\f0\fs22\tab\tab exact text matching (case sensitive, use leading zeroes)\line\cf1\f1\fs24\tab -jf\f0\fs22\tab\tab bypass fill items\line\cf0\f1\fs24\tab -jl\f0\fs22\tab\tab do not create multilingual table if possible\line\f1\fs24\tab -jm\f0\fs22\tab\tab do not try to match the variable names\line\f1\fs24\tab -jn\f0\fs22\tab\tab group the files to be joined without the last underscore separated part\line\tab\tab\tab (overrided by options \f1\fs24 -j1..-j4\f0\fs22 )\line\f1\fs24\tab -jo\f0\fs22\tab\tab use only original values (i.e. do not add new ones)\line\f1\fs24\tab -jr\f0\fs22\tab\tab do not replace metadata (overrided by option \f1\fs24 -ja\f0\fs22 )\line\f1\fs24\tab -js\f0\fs22\tab\tab do not sort the variable values (bypasses options \f1\fs24 -jc\f0\fs22  and \f1\fs24 -je\f0\fs22 )\line\f1\fs24\tab -jt\f0\fs22\tab\tab replace value texts\line\cf1\f1\fs24\tab -ju\f0\fs22\tab\tab join unique \i SOURCE \i0 keywords to a #-separated list\cf0\line\f1\fs24\tab -j1\f0\fs22\tab\tab group the files to be joined without the last character\line\f1\fs24\tab -j2\f0\fs22\tab\tab  - " -  without the last two characters\line\f1\fs24\tab -j3\f0\fs22\tab\tab  - " -  without the last three characters\line\f1\fs24\tab -j4\f0\fs22\tab\tab  - " -  without the last four characters\line\line\tab the single \f1\fs24 -j\f0\fs22  option joins tables with default settings\line\tab the joining options may be given in a single group (\f1\fs24 -jcore\f0\fs22 )\par
\b\f1\fs24 -l\b0\f0\fs22\tab comma-separated language code list for desired output languages, base language as first\line\f1\fs24\tab -len,fi\f0\fs22\tab output in English (as the base language) and Finnish\line\line\f2\lang2057\tab the languages should be available in the source table\line\tab with the structural tables, the system language will be set as the base language, if not\line\tab   separately set\line\cf1\tab if there is an underscore character after the option (e.g. \f1\fs24\lang1035 -len,fi_\f2\fs22\lang2057 ), the table main language \line\tab   will be set from the file name, if possible (e.g. \f1\fs24\lang1035 table_en.xlsx\f2\fs22\lang2057 )\line\tab if there is a plus character after the option (e.g. \f1\fs24\lang1035 -l+\f2\fs22\lang2057 ), the language code will be written next to \line\tab   the table title in the structural file (\f1\fs24\lang1035 csv\f0\fs22 , \f1\fs24 htm\f0\fs22  or \f1\fs24 xls\f0\fs22  output\f2\lang2057 )\lang1035\line\cf0\tab PxJob already contains the title strings for the languages da, de, en, es, fi, fr, it, kl, no, pt, ru,\line\tab   sl, sv and uk\f0\par

\pard\nowidctlpar\fi-710\li710\ri-21\sb240\sa60\b\f1\fs24 -n\b0\f0\fs22\tab add a new variable in the table\line\f1\fs24\tab -nNew\f0\fs22\tab\tab add a new variable \i New\i0\line\f1\fs24\tab -nNew,Uusi,Ny\f0\fs22\tab comma-separated list for a multilingual table in language order\line\f1\fs24\tab -n"New name"\f0\fs22\tab quotes needed with spaces or commas\line\line\tab the new variable value text will be the file name without path or extension\line\tab spaces will be converted to underscores\line\line\cf1 the new value text may also be given separated by a semicolon:\line\f1 -nNew;value\f0\tab add a new variable \i New\i0  with the value text \i value\line\i0\f1 -nNew,Uusi,Ny;value,arvo,v\'e4der\f0\line\tab\tab\tab\tab comma-separated lists for multilingual tables in language order\line\f1 -nNew;CONTENTS\f0\tab add a new variable \i New\i0  with the value text from the keyword contents\par

\pard\nowidctlpar\ri31\sb240\sa60\cf0\b\f1\fs24 -v\b0\f0\fs22\tab new variable name in variable combining (see option \f1\fs24 -g\f0\fs22 )\line\f1\fs24\tab -vTime\f0\fs22\tab\tab\tab set combined variable name as \i Time\i0\line\f1\fs24\tab -vTime,Aika,Tid\f0\fs22\tab comma-separated list for a multilingual table in language order\line\f1\fs24\tab -v"New time"\f0\fs22\tab\tab quotes needed with spaces or commas\line\line\ul\f2 1.3\ulnone\tab\ul\i\f0 Switches\ulnone\b\i0\par
\b0 Switches are options with two values, they start with an exclamation mark and there are no modifiers.\line All the switches may be grouped (\f1\fs24 !esx\f0\fs22 ).\par

\pard\nowidctlpar\ri31\b\par
\f1\fs24 !a\b0\f0\fs22\tab read all Excel sheets\line\cf1\b\f1\fs24 !A\tab\b0\f0\fs22 skip non-structural sheets without error message\cf0\line\b\f3\fs24\lang2057 !b\b0\f0\fs22\tab bypass the default string input conversion from DOS to Unicode\par
\cf1\b\f3\fs24 !c\b0\f0\fs22\tab combine codes to value texts (\f1\fs24\lang1035 csv\f0\fs22\lang2057  and \f1\fs24\lang1035 xls\f0\fs22\lang2057 )\cf0\par
\b\f3\fs24 !d\b0\f0\fs22\tab delete variables with only one value\f3\fs24\par
\b !f\b0\f0\fs22\tab file reading, fill items as zeroes\line\tab\f1\fs24\lang1035 job=report\f0\fs22\lang2057\tab always write the file name in the report\line\tab\f1\fs24\lang1035 job=px\tab\f0\fs22\lang2057\tab read all source files even though there is a file filter in the control file\line\tab\f1\fs24\lang1035 job=csv\tab\f0\fs22\lang2057\tab convert all fill items to zeroes\line\tab\f1\fs24\lang1035 job=htm\tab\f0\fs22\lang2057\tab  - " -\line\tab\f1\fs24\lang1035 job=txt\tab\f0\fs22\lang2057\tab  - " -\line\b\f3\fs24 !g\b0\f0\fs22\tab add the language code at the end of the monolingual file name\line\tab if the \f1\fs24\lang1035 -j1\f0\fs22\lang2057  option is being used the first character of the main language code will be added \line\tab   in capitals at the end of the file name\par
\b\f3\fs24 !h\b0\f0\fs22\tab database publishing pipeline settings in Statistics Finland, e.g.:\line\tab\i MATRIX \i0 keyword\par
\tab file name checking (the allowed name list is given with the \f1\fs24\lang1035 meta\f0\fs22\lang2057  parameter)\line\tab\cf1\f1\fs24\lang1035 csv\f0\fs22\lang2057  and \f1\fs24\lang1035 xls\f0\fs22\lang2057 : add hierarchy codes to the structural table\cf0\par
\b\f3\fs24 !i\b0\f0\fs22\tab show job progress information in the Task Bar balloon\par
\b\f3\fs24 !k\b0\f0\fs22\tab keep the old file timestamp if possible\par
\cf1\b\f3\fs24 !l\b0\f0\fs22\tab use system language for character conversion\line\b\f3\fs24 !m\b0\f0\fs22\tab add metadata (the keyword block) to the structural table\lang1035  \lang2057 (\f1\fs24\lang1035 csv\f0\fs22\lang2057  and \f1\fs24\lang1035 xls\f0\fs22\lang2057 )\lang1035\par
\cf0\b\f3\fs24\lang2057 !n\b0\f0\fs22\tab add footnotes to the output (\f1\fs24\lang1035 csv\f0\fs22 , \f1\fs24 htm\f0\fs22  and \f1\fs24 xls\f0\fs22 )\line\tab\cf1 do not copy the missing keywords from the base language (\f1\fs24 px\f0\fs22 )\cf0\lang2057\par
\b\f3\fs24 !o\b0\f0\fs22\tab do not write to the log file\f3\fs24\par
\b !p\b0\f0\fs22\tab save using the screen decimal precisions (not for \f1\fs24\lang1035 px\f0\fs22\lang2057  files)\line\tab uses \i SHOWDECIMALS\i0  and \i PRECISION\i0 s instead of \i DECIMALS\i0\par
\b\f3\fs24 !q\b0\f0\fs22\tab\f1\fs24\lang1035 px\f0\fs22\lang2057  files: quick file copying\line\tab   first the metadata is manipulated and written to the output file\line\tab   then the data part will be copied from the source file untouched (without checking)\line\tab\f1\fs24\lang1035 csv\f0\fs22\lang2057  files: save the file with both \f1\fs24\lang1035 csv\f0\fs22\lang2057  and \f1\fs24\lang1035 xls\f0\fs22\lang2057  extensions (with \f1\fs24\lang1035 -o5\f0\fs22\lang2057  option)\par
\cf1\b\f3\fs24 !s\b0\f0\fs22\tab skip the PxEdit main settings file (does not affect the \f1\fs24 set\f0\fs22  parameter)\cf0\par
\b\f3\fs24 !t\b0\f0\fs22\tab try to set the \i TIMEVAL \i0 keyword when combining variables\par
\cf1\b\f3\fs24 !u\b0\f0\fs22\tab set the file timestamp from\lang1035  \i LAST-UPDATED\i0  \cf0\par
\b\f3\fs24\lang2057 !v\b0\f0\fs22\tab output file validation (only for \f1\fs24\lang1035 px\f0\fs22\lang2057  files, needs the \f1\fs24\lang1035 out\f0\fs22\lang2057  parameter)\line\tab the output file will not be replaced, if it is newer than the source file\line\tab not with joining or archiving (\f1\fs24\lang1035 -j\f0\fs22\lang2057  or \f1\fs24\lang1035 -z\f0\fs22\lang2057 )\line\b\f3\fs24 !w\b0\f0\fs22\tab write other than source files to the output directory\line\tab only with different source and target directories\line\b\f3\fs24 !x\b0\f0\fs22\tab\lang1035 expunge (remove) the source files (use with caution)\par
\b\f3\fs24\lang2057 !y\b0\f0\fs22\tab save changed tables only\par
\cf1\b\f3\fs24 !z\b0\f0\fs22\tab convert BIG5 coded texts to Unicode\cf0\lang1035\par
\par

\pard\nowidctlpar\ri31\sb240\sa60\ul\f2 1.4\ulnone\tab\ul\i\f0 Control files\ulnone\b\i0\par
\b0 The control files are semicolon- or tabulator-separated fields containing text files (\f1\fs24 csv\f0\fs22  files).  \line The leading and trailing spaces are removed from the fields.  The text comparisons are not case sensitive.\par
\ul\i metadata injection\ulnone\b\i0\par

\pard\nowidctlpar\ri31\b0\par
\f2 The first row contains the column headers and the following rows contain the corresponding control fields. Each row will be handled separately, empty fields will be skipped and will thus not be taken into account.  \line The column order is free.\par
\par
The following columns are possible:\line\line\i\lang2057\tab <keyword> \i0\tab\tab the new contents for the specified px keyword\line\tab\i languagecode\i0\tab\tab specific language code\line\tab\i replacetext\i0\tab\tab the text string to be replaced\line\tab\i filename\i0\tab\tab the file name (may include part of the path, no \f3\fs24 px\f2\fs22  extension needed)\line\tab\i variablename\i0\tab\tab variable name for variable and value-specific keywords\line\tab\i valuetext\i0\tab\tab value text (or code) for value-specific keywords\line\tab\i code\i0\tab\tab\tab value code\line\i\tab <variable>\i0\tab\tab value text, code, or * for cell-specific keywords\line\tab\i STUB\i0\tab\tab\tab row variables (comma-separated list, quoted if necessary)\line\tab\i HEADING\i0\tab\tab column variables ( - " - )\cf6\line\tab\tab\tab\par

\pard\nowidctlpar\ri31\sa200\sl276\slmult1\cf0 Table-specific keyword injection or changing:\cf6\line\tab  \i <keyword> \{<keyword>,...\} \{replacecode\} \{languagecode\} \{filename\}\i0\par
\cf0 Variable-specific keyword injection or changing:\cf6\line\tab\i <keyword> \{<keyword>,...\} variablename \{replacecode\} \{languagecode\} \{filename\}\i0\par
\cf0 Value-specific keyword injection or changing:\cf6\line\tab\i <keyword> \{<keyword>,...\} variablename valuetext \{replacecode\} \{languagecode\} \{filename\}\i0\par
\cf0 Cell-specific keyword injection or changing:\cf6\line\tab\i <variable> \{<variable>,...\} \{replacecode\} \{languagecode\} \{filename\}\i0\par
\cf0 Table pivoting (reordering variables):\cf6\line\tab\i STUB HEADING \{languagecode\} \{filename\}\line\cf0\tab\i0  the table should contain these, and only these variables\cf6\par
\cf0 Setting row or column variables:\cf6\line\cf0\i\tab STUB \{languagecode\} \{filename\}\line\tab HEADING \{languagecode\} \{filename\}\i0\par
Changing the variable name:\line\tab\i variablename replacetext \{languagecode\} \{filename\}\i0\par
Changing the value text for a variable:\line\i\tab variablename valuetext replacetext \{languagecode\} \{filename\}\line\tab variablename valuetext code \{languagecode\} \{filename\}\i0\par
Changing or setting the value code for a variable:\line\i\tab variablename code replacetext \{languagecode\} \{filename\}\line\tab variablename code valuetext \{languagecode\} \{filename\}\cf7\i0\f4\par

\pard\nowidctlpar\ri31\cf0\f2 Every row is regarded as a separate update instruction (either add, change or delete command) and there may be several keywords of the same level.  The input fields are checked according to the keyword type (not as strictly as when reading the \f1\fs24 px\f2\fs22  table).  The existing keyword contents are not replaced as default, this can be changed with option \f3\fs24 -r\f2\fs22 .  Variable name, value text or value codes are replaced, though.  Keyword contents are removed with the update value \b\f3\fs24 ~\b0\f2\fs22 .\par
\par
The keywords \cf6\i CODES\i0 , \i DATA\i0 , \i HIERARCHIES\i0 , \i HIERARCHYNAMES\i0 , \i HIERARCHYLEVELS\i0 , \i HIERARCHYLEVELSOPEN\i0 , \i KEYS\i0 , \i LANGUAGES\i0 ,  \i PARTITIONED \i0 and \i VALUES\i0  are not handled.\cf0\par

\pard\nowidctlpar\ri31\sb240\sa60\cf6 The control file may be created from the table metadata either with \i File\lang1035 |Save to|PxJob-csv \i0 selection in PxEdit or by using the \cf0\f1\fs24 csv\f2\fs22\lang2057  job type in PxJob with output parametres \f1\fs24\lang1035 -o3\f2\fs22\lang2057  (verbose output) or \f1\fs24\lang1035 -o4\f2\fs22\lang2057  (repeated values included)\cf6\lang1035 .  The \cf0\f1\fs24 csv\cf6\f2\fs22  job may use another \cf0\f1\fs24 csv\cf6\f2\fs22  file with the meta parameter to filter the output, the filtering \cf0\f1\fs24 csv\cf6\f2\fs22  file uses the same format as the report control file\par
\cf1\lang2057 The contents for the \i TIMEVAL \i0 keyword may be either a valid \i TLIST \i0 sentence or just the used frequency code \f1\fs24 A\f2\fs22 , \f1\fs24 Q\f2\fs22 , \f1\fs24 M\f2\fs22  or \f1\fs24 H\f2\fs22 .  PxJob always checks if the \i TIMEVAL \i0 setting may be used for the corresponding variable.\cf6\lang1035\par

\pard\nowidctlpar\ri-21\sb240\sa60\cf1\lang2057 All the values for the value-specific keyword may be denoted by the special character *.\par
It is possible to copy some keyword values to another.  The following alternatives are possible:\par

\pard\nowidctlpar\ri31\sb240\sa60\ul column header\ulnone\tab\ul content text\ulnone\line\i CODES\i0\tab\tab\i VALUES\i0\line\i NOTEX\i0\tab\tab\i NOTE\i0\line\i NOTE\i0\tab\tab\tab\i NOTEX\i0\line\i VALUENOTEX\i0\tab\i VALUENOTE\i0\line\i VALUENOTE\i0\tab\tab\i VALUENOTEX\i0\line\i CELLNOTEX\i0\tab\tab\i CELLNOTE\i0 , \i VALUENOTE \i0 or \i VALUENOTEX\i0\line\i CELLNOTE\i0\tab\tab\i CELLNOTEX\i0 , \i VALUENOTE \i0 or \i VALUENOTEX\par
\i0 When the valuenote is copied to a cellnote, the first found VALUENOTE/X value is expanded to all given variable values.\par
The control table may be pivoted, then the headers will be in the first column and their control fields are in the corresponding rows.\b\f0\lang1035\line\cf0\line\ul\b0\i creating partial tables with \f3\fs24\lang2057 split\f0\fs22\lang1035  job\ulnone\b\i0\par

\pard\nowidctlpar\ri31\b0\par
\f2 The first row of the control file contains the column headers and the columns contain the corresponding control fields.  Every row is handled separately, empty fields will be skipped.  The column order is free.  The variable order will be the same as in the definition, all other found variables will be placed at the end of the row variable list.\par

\pard\nowidctlpar\ri31\sb240\sa60 The following columns are possible:\line\i\lang2057\line\tab STUB\tab\tab\tab\i0 row variables (comma-separated list, quoted if necessary)\line\i\tab HEADING\tab\tab\i0 column variables ( - " - )\line\i\tab languagecode\i0\tab\tab language code (if missing, the table base language will be used)\line\i\tab takevalues\i0\tab\tab the number of values taken from the start (or end, if negative) of the list\line\i\tab skipvalue\i0\tab\tab the value which is not in the result (may be several)\line\i\tab withvalue\i0\tab\tab values in the selection column order (default: all values)\line\i\tab <empty>\i0\tab\tab equals to \i withvalue\i0\line\i STUB \i0 and \i HEADING \i0 are mandatory.\line\b\f0\lang1035\line\ul\b0\i control file for reporting\ulnone\b\i0\par
\b0\f2\lang2057 The report job may use a \f1\fs24\lang1035 csv\f2\fs22\lang2057  control file via \f1\fs24 meta\f2\fs22  parameter.  It consists of at least two columns.  \line The first column contains the level code:\par
\tab\f1\fs24\lang1035 0\f2\fs22\lang2057\tab\tab general code\line\tab\f1\fs24\lang1035 1\f2\fs22\lang2057\tab\tab table-specific keyword\line\tab\f1\fs24\lang1035 2\f2\fs22\lang2057\tab\tab variable-specific keyword\line\tab\f1\fs24\lang1035 3\f2\fs22\lang2057\tab\tab value-specific keyword\line\tab\f1\fs24\lang1035 4\f2\fs22\lang2057\tab\tab cell-specific keyword\line\line The second column contains either the control code or the keyword (which cannot be \i CODES\i0 , \i HEADING\i0 , \i KEYS\i0 , \i STUB \i0 or \i VALUES\i0 ).  \i VARIABLES\i0  'keyword' means the combination of \i STUB\i0  and \i HEADING \i0 keywords.\cf3\par

\pard\nowidctlpar\ri31\par
\cf0 The following control words are recognised:\cf6\line\line\cf0\i\tab filename\i0\tab\tab the file name for the table\line\i\tab filepath\i0\tab\tab\tab the directory path for the table\line\i\tab pathname\tab\i0\tab the combined directory path and file name for the table\line\i\tab filecreate\i0\tab\tab the file creation timestamp\line\i\tab fileupdate\i0\tab\tab the file updating timestamp\line\i\tab filesize\i0\tab\tab\tab the file size in bytes\line\i\tab tablesize\i0\tab\tab table size: (row variables)x(column variables)=number of cells\line\i\tab languagecode\i0\tab\tab language filter (each language in own row)\line\i\tab variable\i0\tab\tab variable filter (each variable in own row)\line\i\tab value\tab\i0\tab\tab value filter\line\line\i\tab datacells\i0\tab\tab number of data cells\line\i\tab datanumbers\i0\tab\tab number of genuine numbers\line\i\tab datazeroes\i0\tab\tab number of zeroes\line\i\tab datadashes\i0\tab\tab number of dash codes\line\i\tab datadotcodes\i0\tab\tab number of dot codes\line\i\tab datadots1 .. 7\i0\tab\tab number of 1-7 dot codes\line\i\tab datamin\i0\tab\tab smallest data value\line\i\tab datamax\i0\tab\tab largest data value\line\i\tab datamean\i0\tab\tab data average\cf6\line\cf0\par
The control words that start with \i data \i0 cause the report process to read the data part, which may slow down the process remarkably.  If the data value headers have the percent sign at the end (e.g. \i datadotcodes%\i0 ), its value will be the percentage calculated with the total number of cells.\cf3\par
\par
\cf0 The filter controls and keywords may have additional elements, which will delimit the reported tables and/or information (these elements are not case-sensitive):\cf3\par
\cf6\par
\cf0\i\tab languagecode\i0\tab\tab\tab only denoted languages in separate rows\par
\i\tab variable\i0\tab\tab\tab only the tables containing the listed variables\par
\i\tab value\i0\tab\tab\tab\tab only the tables containing the listed value texts or codes\par
\i\tab content\i0\tab\tab\tab only those keywords containing (part of) the given contents\cf6\par
\line\cf0\tab\f1\fs24 0;languagecode;en\f2\fs22\tab only English metadata\line\f1\fs24\tab 0;variable;info\f2\fs22\tab tables containing the variable \i Info\i0\line\tab\f1\fs24 0;value;Espoo;049\f2\fs22\tab tables containing the value text \i Espoo\i0  or value code \i 049\i0\line\tab\f1\fs24 0;content;HREF;htm\f2\fs22\tab metadata containing links\cf6\par
\par
\cf0 If there is no control file used in reporting, the default report will have the columns \i pathname\i0 , \i filesize\i0 , \i fileupdate\i0 , \i tablesize\i0 , \i languagecode\i0 , \i VARIABLES \i0 and mandatory keywords.\par
\par
The control file may be created with \i Edit|Database|Report\i0  in PxEdit.\cf6\par
\par
\cf1 The value texts may be listed with the variable-specific control code \i VALUES\i0 , which is available only with PxJob.\cf6\par
\par
\cf0\ul\i\f0\lang1035 control files for service runs\ulnone\b\i0\par
\par
\b0\i TABLEID \i0 run (\f1\fs24\lang2057 -h4\f0\fs22\lang1035 ) the first column is table name, the second is contents.\line\par
\i VARIABLE-ID\i0  run (\f1\fs24\lang2057 -h5\f0\fs22\lang1035 ) the columns are table name, variable and contents.\line\par
In database publishing (\f1\fs24\lang2057 !h\f0\fs22\lang1035 ) the control file contains the allowed file names.\par
\cf6\f2\lang2057\par

\pard\nowidctlpar\ri31\sb240\sa60\cf0\b\f0\lang1035\line\ul 2.\ulnone\tab\ul Table validation\ulnone\par
\b0 A simple table validation can be made with the command:\line\line\b\f1\fs24\tab in=\b0 D:\\in\\Table.px \b log=\b0 D:\\logs\\Batch.log\f0\fs22\par
The file \f1\fs24 Table.px\f0\fs22  will be opened, its metadata integrity is checked, the possible small metadata errors will be repaired and it will be saved back in standardised format.  All actions will be recorded in the log file \f1\fs24 Batch.log\f0\fs22 .\par
It might be easier for the publication process to utilise a separate directory for the validation.  Validation may be run frequently with the command:\line\line\tab\f1\fs24 in=D:\\in\\source\\ \b out=\b0 D:\\out\\ \b err=\b0 D:\\probs\\ -\b e1\b0\f0\fs22\par
All the \f1\fs24 px\f0\fs22  files will be read from the directory \f1\fs24 D:\\in\\source\f0\fs22 , they are validated and the result files are saved in the directory \f1\fs24 D:\\out\\\f0\fs22 .  The sensitivity option \f1\fs24 -e1\f0\fs22  makes it possible to save all valid \f1\fs24 px\f0\fs22  files, and only those files which cannot be processed will be copied to the directory \f1\fs24 D:\\probs\\\f0\fs22 .  If the option is missing (or is set as \f1\fs24 -e0\f0\fs22 ), all files that have metadata problems would be copied to the error directory.\par
When there is need to read and write the full directory structure, the option \f1\fs24 -s\f0\fs22  becomes handy:\line\line\tab\f1\fs24 in=D:\\in\\ out=D:\\out\\ err=D:\\probs\\ -\b s\b0 e1\f0\fs22\par
If there is need to add standard metadata to the tables (e.g. \i SOURCE \i0 and \i COPYRIGHT\i0 ), the old method is to use a separate \f1\fs24 pxk\f0\fs22  file for it:\line\line\tab\f1\fs24 in=.. out=.. err=.. log=.. -e1 \b meta=\b0 D:\\meta\\Template\b .pxk\b0\f0\fs22\par
The recommended way is to use a \f1\fs24 csv\f0\fs22  control file for this purpose:\line\line\tab\f1\fs24 in=.. out=.. err=.. log=.. -e1 \b meta=\b0 D:\\meta\\Template\b .csv\b0\f0\fs22\par
When the only purpose is to check that the metadata in \f1\fs24 px\f0\fs22  files for publication are valid, the error sensitivity may be set high:\line\line\tab\f1\fs24 in=.. out=.. err=.. \b copy=\b0 D:\\ok\\ log=.. \b !qx\b0\f0\fs22\par
The valid files will be copied to the directory \f1\fs24 D:\\ok\f0\fs22  and they will be deleted in the source directory \line (\f1\fs24 !x)\f0\fs22 .  The data parts will be moved without checking (\f1\fs24 !q\f0\fs22 ), this will speed up the process remarkably.\par
\b\par
\ul 3.\ulnone\tab\ul File conversions\ulnone\par
\ul\b0\f2 3.1\ulnone\tab\ul Conversion to px-format\ulnone\b\f0\par
\b0 PxEdit and PxJob applications have originally been made for px-file manipulations and creating them from different sources.  In addition to \f1\fs24 px\f0\fs22  files PxJob accepts so called structural tables (\f1\fs24 csv\f0\fs22 , \f1\fs24 txt\f0\fs22  or other recognisable text file formats).  If there is \i Excel \i0 installed, reading and writing of \f1\fs24 xls\f0\fs22  and \f1\fs24 xlsx\f0\fs22  files is possible.  The structural files do not have much metadata apart from the table title, variable names and value texts and codes.  PxJob saves the \f1\fs24 px\f0\fs22  files even without all mandatory metadata for \f1\fs24 px\f0\fs22  file format. Other px family applications may not be able to open them, though.  Metadata can be enriched using template files, joining tables, using control files or manually with PxEdit.\par
The output format can be changed with the option \f1\fs24 -o\f0\fs22  as a \f1\fs24 pxk\f0\fs22  file (metadata template file, \f1\fs24 px\f0\fs22  file without data part) or as sparse matrix (so called \i KEYS \i0 format) for huge data parts with plenty of rows containing only zeroes.\par
PxJob reads different character codings (DOS-ANSI, Win-ANSI or several Unicode codings). The files will be saved either as in WinANSI or UTF-8 (Unicode) type.  The preferred coding may be set with the option  \f1\fs24 -c\f0\fs22 .\b\par
\ul\b0\f2 3.2\ulnone\tab\ul Conversion to structural table (\f1\fs24 csv\f2\fs22 , \f1\fs24 txt\f2\fs22  and \f1\fs24 xls\f2\fs22 )\ulnone\b\f0\par
\b0 The tables will be saved as structural files.  The way in which the value texts and codes will be shown is changed with the option \f1\fs24 -t\f0\fs22 .  Footnotes may be added under the table with the switch \f1\fs24 !n\f0\fs22 .  The decimal precision may be set to be the same as the screen precision with the switch \f1\fs24 !p\f0\fs22 .\par
\f1\fs24 Csv\f0\fs22  files are simple text files, but they can be used for transferring tables to different spreadsheet programs (e.g. \i LibreOffice\i0 ), the field separator may be changed with the option \f1\fs24 -o\f0\fs22 .\par
Saving to Excel files (\f1\fs24 xls\f0\fs22  and \f1\fs24 xlsx\f0\fs22 ) is possible, if \i Excel \i0 has been installed.  The output option \f1\fs24 -o\f0\fs22  may be used to set the output type, and it is possible to add the footnotes as cell comments, too.\par
\ul\f2 3.3\ulnone\tab\ul Other conversion types (\f1\fs24 htm\f2\fs22 , \f1\fs24 xml\f2\fs22  and \f1\fs24 sql\f2\fs22 )\ulnone\b\f0\par
\b0\f1\fs24 Htm\f0\fs22  files are mainly used with web browsers.  It is not recommended to make \f1\fs24 html\f0\fs22  files from big tables.  The output option \f1\fs24 -o\f0\fs22  may be used for setting the cell background colouring, either grey scaled or the same as in the PxEdit table windows.  The title option \f1\fs24 -t\f0\fs22  may be used for setting all the row variables in a one intended column. \b\par
\b0\f1\fs24 XML\f0\fs22  output formats are made according to Statistics Finland's \i CoSSI-XML\i0  definition.  Output formats may be either \i XDF\i0 , which is suitable for saving huge tables, \i Cals \i0 which is used mainly in a publishing process (e.g. in the \i ArborText \i0 product used within Statistics Finland) and \i Keys\i0 , suitable for sparse matrices.  It is not recommended to make \i Cals\i0  output from big tables, because the file size may grow rapidly.\b\par
\b0 The \f1\fs24 SQL\f0\fs22  output files are made according to Statistics Greenland's PxSQL model.\par
\b\par
\ul 4.\ulnone\tab\ul Metadata handling\ulnone\par
\ul\b0 4.1\ulnone\tab\ul Metadata injection using control files\ulnone\par
The recommended way to manipulate metadata is to use separate \f1\fs24 csv\f0\fs22  control files.  \line The next examples use these command line settings:\line\line\f1\fs24\tab in=... \b meta=\b0 Control.csv\line\line\f0\fs22 Each control file for the examples is shown as semicolon-separated text.  The control file may be used to manipulate practically all the table metadata, but a single row should have only information on keywords that share the same level (other keyword fields should be empty).  The leading and trailing spaces are removed from the fields.  The keyword contents are not checked thoroughly, so extra care is needed in control file editing.  The metadata will be set if there is no previous value for the keyword, the existing metadata will be replaced with the option \cf3\f1\fs24 -r\cf0\f0\fs22 .\par
\b\f1\fs24\tab NOTE;SHOWDECIMALS;COPYRIGHT;PRESTEXT\b0\line\tab footnote;2;yes;~\f0\fs22\par
The table-specific keyword \i NOTE\i0  will have the contents \f1\fs24 footnote\f0\fs22 , \i SHOWDECIMALS\i0  will become \f1\fs24 2\f0\fs22  and \i COPYRIGHT \i0 will be set as \f1\fs24 YES\f0\fs22 , if those keywords do not have content before.  The option \f1\fs24 -r\f0\fs22  will always replace the existing values, which may not always be desired, though.  \line The \i PRESTEXT \i0 keyword will be removed, when found (\f1\fs24 ~)\f0\fs22 .\par
\b\f1\fs24\tab DESCRIPTION;CONTENTS;replacetext;filename\b0\line\tab province;province;county;010*\f0\fs22\par
For all the tables the names that start with \f1\fs24 010\f0\fs22 , the texts in the keywords \i DESCRIPTION \i0 and \i CONTENTS \i0 will have the text \i county \i0 changed to \i province\i0 .\par
\b\f1\fs24\tab NOTE;MAP;TIMEVAL;variablename\b0\line\tab footnote;Finland_municipality; ;region\line\tab  ; ;Q;quarter\line\f0\fs22\line The contents for the keyword \i NOTE \i0 for the variable \i region \i0 (or \i Region \i0 etc.) becomes \f1\fs24 footnote\f0\fs22 , the \i MAP\i0  keyword for the same variable becomes \f1\fs24 Finland_municipality\f0\fs22  and the TIMEVAL keyword for the variable \i Quarter \i0 will be set as quarter type (\f1\fs24 Q\f0\fs22 ), if it is possible.  The variable names will be checked in the base language of the multilingual table, if the language is not separately set.\par
\b\f1\fs24\tab NOTE;variablename;languagecode\b0\line\tab alaviite;ik\'e4;fi\f0\fs22\par
Sets the Finnish footnote for the variable \i Ik\'e4\i0  in a multilingual table.\par
\b\f1\fs24\tab PRECISION;VALUENOTE;variablename;valuetext;code\b0\line\tab 1; ;Information;percentage;\line\tab  ;preliminary data;Year; ;2020\f0\fs22\line\line Sets the decimal precision for the value \i percentage \i0 in the variable \i Information\i0  and the \i VALUENOTE \i0 keyword with the value code in the variable \i Year\i0 .\par
\b\f1\fs24\tab CELLNOTE;Year;Region;Age;Gender;Status;languagecode\b0\line\tab wonder if any;2018;*;100;total;married;en\par
\f0\fs22 Sets the cell-specific keyword in the table having variables \i Year\i0 , \i Region\i0 , \i Age\i0 , \i Gender \i0 and \i Status\i0 , and only them (not necessarily in this order).  The asterisk denotes all the variable values.\par
\ul 4.2\ulnone\tab\ul Using \f1\fs24 px\f0\fs22  or \f1\fs24 pxk\f0\fs22  files as templates\ulnone\par
If the \f1\fs24 meta\f0\fs22  parameter defines a single \f1\fs24 px\f0\fs22  or \f1\fs24 pxk\f0\fs22  file (a template file), PxJob reads its metadata and copies the suitable ones to the current table.  The template file need not be a fully functional px file, only the keywords \i CHARSET\i0 , \i STUB \i0 and \i HEADING \i0 have to be set.\par
If the \f1\fs24 meta\f0\fs22  parameter defines a single directory, PxJob tries to find a suitable template file within the directory.  If there is no file with the same name (without the extension), the file names are compared without the possible underscore-separated ending parts.  If a corresponding template file is found, it will be processed as a normal template file.\par
When the template file is opened, it will be checked the same way as when opening a normal \f1\fs24 px\f0\fs22  file.\par
\ul 4.3\ulnone\tab\ul Default values\ulnone\par
The option \f1\fs24 -m\f0\fs22  makes PxJob fetch the default keyword settings from the default section in the defined settings file (using the \f1\fs24 set\f0\fs22  parameter), and uses the suitable ones with the current table.  \line The default values are set after other possible keyword and table operations.\par
\par
\ul\b 5.\ulnone\tab\ul Variable handling\ulnone\par
\ul\b0 5.1\ulnone\tab\ul Variable handling with control files\ulnone\par
The control file also makes it possible to reorder the variables and change the variable names, value texts and value codes. \line\line The examples use the following settings:\line\line\f1\fs24\tab in=... \b meta=\b0 Control.csv\par
\f0\fs22 The control file is shown with the semicolon separators.\par
\b\f1\fs24\tab STUB;HEADING\b0\line\tab Region;\line\tab  ;Industry,Municipality\line\tab Year;\b "\b0 Province,2015\b "\b0 ,Age,Status\f0\fs22\par
The variables are reordered with the base language names.  The \i Region\i0  variable will be moved as the only row variable in the tables where it is found.  The variables \i Industry\i0  and \i Municipality\i0  will be moved as the only column variables.  In the tables which have the variables \i Year\i0 , \i Province,2015\i0 , \i Age \i0 and \i Status \i0 (and only them), the variable \i Year \i0 will be moved as a row variable the others as column variables in the given order.  Variable names containing commas must be given in quotes.\par
\b\f1\fs24\tab variablename;valuetext;replacetext\b0\line\tab Information; ;Series\line\tab Country;Finland;Finnland\line\f0\fs22\line The variable name \i Series \i0 will be named to \i Information\i0 , and the value text \i Finnland \i0 in the variable \i Country \i0 will be changed to \i Finland\i0 .  The value text may also be changed with value code and the \f1\fs24 code\f0\fs22  column.\line\line\ul 5.2\ulnone\tab\ul Partial tables\ulnone\par
The tables may be cut into smaller parts using the job type \f1\fs24 split\f0\fs22  and the corresponding \f1\fs24 csv\f0\fs22  control file given with the \f1\fs24 meta\f0\fs22 - parameter.  For example this control file:\par
\b\f1\fs24\tab STUB;HEADING;takevalues;\line\b0\tab Region; ; ;Helsinki;Espoo;Vantaa;Kauniainen\line\tab ;Age; ; \line\tab ;Year;-10;\f0\fs22\par
defines the result table having the row variable \i Region\i0  and its value texts, the variables \i Age\i0  and \i Year\i0  will be set in columns.  \i Age \i0 will have all its values and \i Year \i0 the last ten ones.  These variables have to be found in the current table; if there are more variables, the others will be put at the end of the row variable list.  The output format may be changed with the output option \f1\fs24 -o\f0\fs22  (\f1\fs24 px\f0\fs22 , \f1\fs24 csv\f0\fs22 , \f1\fs24 xls\f0\fs22  or \f1\fs24 htm\f0\fs22 ).\par
\ul 5.3\ulnone\tab\ul Variable combining\ulnone\par
It is possible to combine the variables in the tables with the option \f1\fs24 -g\f0\fs22 .  The option modifier contains the variable names in the base language as a comma-separated list.  As default, the new variable name will be the old names joined with a slash (\f1\fs24 /\f0\fs22 ), and the variable values and codes will be combined as well.  The new name can be given with the option \f1\fs24 -v\f0\fs22  (for a multilingual table the names have to be given as a comma-separated list in the language order), the name separator may be changed with the option \f1\fs24 -p\f0\fs22 .\line\line\tab\-\f1\fs24 -gProvince,Municipality -vRegions -p:\f0\fs22\line\line The variables \i Province \i0 and \i Municipality \i0 will be combined as a new variable \i Regions\i0  with a colon as the name separator.\par
\f1\fs24\tab -gSTUB\f0\fs22\par
Combine all the row variables with default settings.\par
\f1\fs24\tab -gYear,Month -vTime,Aika,Tid\f0\fs22\par
Combine the variables \i Year \i0 and \i Month \i0 as a new variable in a multilingual table.  If the variable \i Year\i0  has an existing \i TIMEVAL\i0  setting, it will be converted to monthly format, if possible, with the standardised value texts and codes.  The switch \f1\fs24 !t\f0\fs22  may be used for the same purpose .\par
\par
\ul\b 6.\ulnone\tab\ul Translations\ulnone\b0\par
The database can be translated to new languages by first giving this type of command:\line\line\f1\fs24\tab job=\b translate\b0  in=D:\\dbase\\ out=D:\\langs\\ \b -s1\b0\f0\fs22\par
This creates a separate text file from each \f1\fs24 px\f0\fs22  file in the database \f1\fs24 D:\\dbase\\\f0\fs22  to the directory \line\f1\fs24 D:\\langs\f0\fs22   (in one single directory without sub-directories) with the file extension \f1\fs24 translate\f0\fs22 .  The file consist of sections that start with the section header lines in brackets.  For example:\par
\f1\fs24\tab [LANGUAGE]\line\tab fi\line\tab [VARIABLES]\line\tab Vuosi\line\tab Kuukausi\line\tab Toimiala\line\tab Sarja\line\tab [VALUES("Kuukausi")]\line\tab Tammikuu\line\tab Helmikuu\line\tab ...\line\tab [VALUES("Toimiala")]\line\tab 45 Moottoriajoneuvojen kauppa ja korjaus\line\tab 46 Tukkukauppa\line\tab ...\line\tab [SUBJECT-AREA]\line\tab Palkat ja ty\'f6voimakustannukset\line\tab [DESCRIPTION]\line\tab Palkkasummakuvaajat toimialoittain 2010=100 (TOL 2008)\line\tab ...\f0\fs22\par
The first section header is \f1\fs24 [LANGUAGE]\f0\fs22 , which determines the input language for each of the sections after it (before the next language section).  When adding new languages, you may either just replace the old language code with a new one, or copy the whole language section at the end of the file for the new language code.\par
The section headers having variable or value texts may be either in the new or base language.  Other section headers than the language headers need not be edited, though.\cf3\par
\cf0 If the keyword contains a list (e.g. \i STUB \i0 or \i VALUES\i0 ), the list items are given in separate rows.  The corresponding lists must contain the same number of items in each language, and the order of the items should be the same.\par
The Swedish translation of the example text could then look like this:\par
\f1\fs24\tab [LANGUAGE]\line\tab sv\line\tab [VARIABLES]\line\tab\'c5r\line\tab M\'e5nad\line\tab Industri\line\tab Serie\line\tab [VALUES("M\'e5nad")]\line\tab Januari\line\tab Februari\line\tab ...\line\tab [VALUES("Industri")]\line\tab 45 Handel; reparation av motorfordon och motorcyklar\line\tab 46 Parti- och provisionshandel utom med motorfordon\line\tab ...\line\tab [SUBJECT-AREA]\line\tab L\'f6ner och arbetskraftskostnader\line\tab [DESCRIPTION]\line\tab L\'f6nesummaindex efter n\'e4ringsgren 2010=100 (TOL 2008)\line\tab ...\f0\fs22\par
The files are then ready for the translators for editing with any suitable text editor.  When the translations are ready, they may be transferred to the files with the command:\par

\pard\nowidctlpar\ri-21\sb240\sa60\f1\fs24\tab job=\b translate\b0  in=D:\\dbase\\ \b meta\b0 =D:\\langs\\ \b -s\line\line\cf1\b0\f0\fs22 The translation files may be created for each language separately with the \f1\fs24 -o1\f0\fs22  option. Each language section will be written in a separate file, and the file name will contain the language code at the end of the file name separated by an underscore.  When the translations are transferred back, PxJob will look for all possible language files in the source directory.\par

\pard\nowidctlpar\ri31\sb240\sa60 The language option \f1\fs24 -l\f0\fs22  may be used for creating language templates.  If the source file doesn't have the language, the template translate file will be written using the main table language.\par
\cf8\par
\cf0\ul\b 7.\ulnone\tab\ul Table joining\ulnone\par
\b0 Table joining is controlled with the option \f1\fs24 -j\f0\fs22 .  The first file in the file list is considered as the base table to which the other files will be joined.  The tables must have the same number of variables, and preferably in the same order.  The base table metadata will be treated as the original metadata, and only the new metadata will be added to the joined table.  The \f1\fs24 -j\f0\fs22  option modifiers may be used for fine-tuning the operation.\cf3\par
\cf0 The variable order will be set according to the variable names.  In the well standardised environment there are no problems, but in some cases the correspondent variables have to be deduced.  For example, if the base table has the variables \i Region\i0 , \i Year \i0 and \i Age \i0 and the join table has the variables \i year\i0 ,\i  age_structure \i0 and \i municipality\i0 , the variable ordering will be changed to \i municipality\i0 , \i year \i0 and \i age_structure\i0 .  At first the clear matches are filtered out (\i Year \i0 and \i year\i0 ), then the first parts of the names (\i Age \i0 and \i age_stucture\i0 ), and the others will just be left in the order (by pure coincidence, \i Region \i0 and \i municipality \i0 were the proper matches in this case).\par
The value texts are matched according to the value codes.  If there are value texts in the variables of the join table that are not found in the base table, they will be moved to the end of the variable.  The variables, that have hierarchical or otherwise suitable alphabetical or numeric codes (e.g. NACE), may be merged according to the code with the option \f1\fs24 -jb\f0\fs22 .  Merging will be done after the join operation.\par
\f1\fs24\tab in=D:\\dbase\\Timeseries.px,D:\\in\\Newmonth.csv out=D:\\out\\ -j\f0\fs22\par
The new monthly data will be joined in the \i Timeseries \i0 table.  If needed, PxJob tries to change the corresponding \i TIMEVAL \i0 setting according to the new values.\par
\f1\fs24\tab in=D:\\dbase\\Industry.px,D:\\in\\NACE2010.xls out=D:\\out\\ -jb\f0\fs22\par
The new annual data will be joined to the \i Industry\i0  table.  The possible new industry values will be merged after the joining.  The \i TIMEVAL \i0 setting will be changed, if it exists.\par
\f1\fs24\tab in=D:\\in\\provinces.xls \b -j !a \b0 out=D:\\out\\\f0\fs22\par
All the \i Excel \i0 worksheets with stuctural tables will be opened (\f1\fs24 !a\f0\fs22 ), they are joined (\f1\fs24 -j\f0\fs22 ) and saved to the output directory as \f1\fs24 provinces.px\f0\fs22 .\par
\f1\fs24\tab in=D:\\in\\files\\ \b -n\b0 "Causes of death" -j out=D:\\out\\Deaths.px\f0\fs22\par
The files in the same directory will be joined as one table (\i\f1\fs24 Deaths\i0 .px\f0\fs22 ).  The file names are the classifications (variable values), and the result table will have a new variable (\i Causes of death\i0 ), which will have those classifications as value texts.\par
\ul 7.1\ulnone\tab\ul Creating multilingual tables by joining monolingual ones\ulnone\par
When joining tables with different languages, the variables must be in the same order (variable or value matching is not meaningful here).  PxJob will always create a multilingual table, if possible.  If some languages do not have the specific metadata, it will be copied from the base language.\par
Joining of the two monolingual tables as one multilingual one:\par
\f1\fs24\tab in=D:\\dbase\\Pop_fi.px,D:\\dbase\\Pop_en.px out=D:\\out\\Pop.px -j\f0\fs22\par
If there is a database which has several languages, and each language is in a different file, and the file names have been standardised, the new multilingual database can be created with a single command.\line   \line For example, if the table names end with underscore and the language code (\f1\fs24 Table_fi.px\f0\fs22 , \f1\fs24 Table_sv.px\f0\fs22 ), the tables in base language may even be without the language code (\f1\fs24 Table.px\f0\fs22 ):\par
\f1\fs24\tab in=D:\\dbase\\ out=D:\\multi\\ \b -jn \b0 -s \b -len,fi,sv\b0  !w\f0\fs22\par
This command creates a new database (\f1\fs24 D:\\multi\\\f0\fs22 ) with the same structure as the original one (\f1\fs24 -s\f0\fs22 ).  All the other than \f1\fs24 px\f0\fs22  files will be copied (\f1\fs24 !w\f0\fs22 ).  The database tables will be joined according to the file names (\f1\fs24 -jn\f0\fs22 ) in the language order English (base language), Finnish and Swedish (\f1\fs24 -len,fi,sv\f0\fs22 ).  All the language files are not needed in the database.  The new tables will be copied according to the table base language, i.e. the files may be scattered in the database (arranged by language).\par
If the language identifier is at the end of the file name with a fixed length, (\f1\fs24 TableE.px\f0\fs22 , \f1\fs24 TableSV.px\f0\fs22  etc.), the numeric modifier of the option \f1\fs24 -j\f0\fs22  may show the identifier length (\f1\fs24 -j1\f0\fs22 ..\f1\fs24 -j4\f0\fs22 ), and the file names will be compared without the identifier.\par
\par

\pard\nowidctlpar\ri-21\sb240\sa60\cf1\ul\b 8.\ulnone\tab\ul Return codes\ulnone\par
\b0 PxJob will return an exit code when terminating.  The exit code may be used in the calling environment macros (such as \f1\fs24 %errorlevel%\f0  values within bat files)\fs22 .  The following return codes are in use:\par
\f1\fs24\tab 0\f2\fs22\lang2057\tab\tab ok\line\line\f1\fs24\lang1035\tab 1-10\f2\fs22\lang2057  \i interpreter errors\i0 , such as:\line\tab  \f1\fs24\lang1035 1\f2\fs22\lang2057\tab\tab failed to start\line\tab  \f1\fs24\lang1035 3\f2\fs22\lang2057\tab\tab system error\line\tab  \f1\fs24\lang1035 4\f2\fs22\lang2057\tab\tab runtime violation\line\line\f1\fs24\lang1035\tab 11-20\f2\fs22\lang2057  \i PxJob errors\i0 :\line\tab  \f1\fs24\lang1035 11\f2\fs22\lang2057\tab\tab input file read error\line\tab  \f1\fs24\lang1035 12\f2\fs22\lang2057\tab\tab output file write error\line\tab  \f1\fs24\lang1035 13\f2\fs22\lang2057\tab\tab parsing problem\line\tab  \f1\fs24\lang1035 14\f2\fs22\lang2057\tab\tab no input files\line\tab  \f1\fs24\lang1035 15\f2\fs22\lang2057\tab\tab inject csv read error\line\tab  \f1\fs24\lang1035 16\f2\fs22\lang2057\tab\tab template file not found\line\tab  \f1\fs24\lang1035 17\f2\fs22\lang2057\tab\tab template file read error\line\tab  \f1\fs24\lang1035 18\f2\fs22\lang2057\tab\tab zip engine missing\line\tab  \f1\fs24\lang1035 19\f2\fs22\lang2057\tab\tab list file is empty\line\line\f1\fs24\lang1035\tab 21-255\f2\fs22\lang2057  \i coding errors\i0 , such as:\line\tab  \f1\fs24\lang1035 21\f2\fs22\lang2057\tab\tab ws full (memory problem)\line\tab  \f1\fs24\lang1035 22\f2\fs22\lang2057\tab\tab syntax error\line\tab  \f1\fs24\lang1035 23\f2\fs22\lang2057\tab\tab indexing error\par

\pard\nowidctlpar\ri31\sb240\sa60 NB: the error codes \f1\fs24\lang1035 11\f2\fs22\lang2057  or \f1\fs24\lang1035 12\f2\fs22\lang2057  will be returned, if the problem is encountered with any files when handling multiple files.  The returned error code will be the greatest, if more than one errors is found.\f0\lang1035\par

\pard\nowidctlpar\ri31\cf0\par
}
 